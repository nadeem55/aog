// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.etlxml24hr_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: ETLXML24HR Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status
 */
public class ETLXML24HR implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (FileName != null) {

				this.setProperty("FileName", FileName.toString());

			}

			if (FilePath != null) {

				this.setProperty("FilePath", FilePath.toString());

			}

		}

		public String FileName;

		public String getFileName() {
			return this.FileName;
		}

		public String FilePath;

		public String getFilePath() {
			return this.FilePath;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ETLXML24HR";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ETLXML24HR.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ETLXML24HR.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class resultsStruct implements routines.system.IPersistableRow<resultsStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[0];

		public String Potline;

		public String getPotline() {
			return this.Potline;
		}

		public String PotNo;

		public String getPotNo() {
			return this.PotNo;
		}

		public String Date_of_Record;

		public String getDate_of_Record() {
			return this.Date_of_Record;
		}

		public String Pot_Start_Date;

		public String getPot_Start_Date() {
			return this.Pot_Start_Date;
		}

		public String Age_pot_months;

		public String getAge_pot_months() {
			return this.Age_pot_months;
		}

		public String AlF3_excess;

		public String getAlF3_excess() {
			return this.AlF3_excess;
		}

		public String Bath_transferred;

		public String getBath_transferred() {
			return this.Bath_transferred;
		}

		public String CaF2_perc;

		public String getCaF2_perc() {
			return this.CaF2_perc;
		}

		public String bath_height;

		public String getBath_height() {
			return this.bath_height;
		}

		public String metal_height;

		public String getMetal_height() {
			return this.metal_height;
		}

		public String Pot_Current;

		public String getPot_Current() {
			return this.Pot_Current;
		}

		public String Anode_Inc1;

		public String getAnode_Inc1() {
			return this.Anode_Inc1;
		}

		public String Anode_Inc2;

		public String getAnode_Inc2() {
			return this.Anode_Inc2;
		}

		public String Anode_Inc3;

		public String getAnode_Inc3() {
			return this.Anode_Inc3;
		}

		public String Mass_MetalTransfer;

		public String getMass_MetalTransfer() {
			return this.Mass_MetalTransfer;
		}

		public String Metal_Tapping_KG;

		public String getMetal_Tapping_KG() {
			return this.Metal_Tapping_KG;
		}

		public String Manual_Doses_CrustBath;

		public String getManual_Doses_CrustBath() {
			return this.Manual_Doses_CrustBath;
		}

		public String Automatic_Doses_CrustBath;

		public String getAutomatic_Doses_CrustBath() {
			return this.Automatic_Doses_CrustBath;
		}

		public String Alumina_Doses;

		public String getAlumina_Doses() {
			return this.Alumina_Doses;
		}

		public String AlF3_Doses_Auto;

		public String getAlF3_Doses_Auto() {
			return this.AlF3_Doses_Auto;
		}

		public String AlF3_Doses_Man;

		public String getAlF3_Doses_Man() {
			return this.AlF3_Doses_Man;
		}

		public String FastFeed_Doses;

		public String getFastFeed_Doses() {
			return this.FastFeed_Doses;
		}

		public String Anode_Effect_Average;

		public String getAnode_Effect_Average() {
			return this.Anode_Effect_Average;
		}

		public String Valid_Tests;

		public String getValid_Tests() {
			return this.Valid_Tests;
		}

		public String Time_To_Anode_effect_Min;

		public String getTime_To_Anode_effect_Min() {
			return this.Time_To_Anode_effect_Min;
		}

		public String Mean_Resistance;

		public String getMean_Resistance() {
			return this.Mean_Resistance;
		}

		public String Reference_Resistance;

		public String getReference_Resistance() {
			return this.Reference_Resistance;
		}

		public String Bath_Temp;

		public String getBath_Temp() {
			return this.Bath_Temp;
		}

		public String Fe;

		public String getFe() {
			return this.Fe;
		}

		public String Instability_Time;

		public String getInstability_Time() {
			return this.Instability_Time;
		}

		public String LongTerm_Instability_Time;

		public String getLongTerm_Instability_Time() {
			return this.LongTerm_Instability_Time;
		}

		public String Si;

		public String getSi() {
			return this.Si;
		}

		public String Underfeeding_time;

		public String getUnderfeeding_time() {
			return this.Underfeeding_time;
		}

		public String Fast_feeding_time;

		public String getFast_feeding_time() {
			return this.Fast_feeding_time;
		}

		public String Talonaz_Time;

		public String getTalonaz_Time() {
			return this.Talonaz_Time;
		}

		public String Anode_Effect_Time;

		public String getAnode_Effect_Time() {
			return this.Anode_Effect_Time;
		}

		public String Theo_Feeding_Time;

		public String getTheo_Feeding_Time() {
			return this.Theo_Feeding_Time;
		}

		public String Ultra_feeding_time;

		public String getUltra_feeding_time() {
			return this.Ultra_feeding_time;
		}

		public String hood_open_per24hrs;

		public String getHood_open_per24hrs() {
			return this.hood_open_per24hrs;
		}

		public String Cath_Voltage_Drop;

		public String getCath_Voltage_Drop() {
			return this.Cath_Voltage_Drop;
		}

		public String Potline_Voltage_Mean;

		public String getPotline_Voltage_Mean() {
			return this.Potline_Voltage_Mean;
		}

		public String Pot_Voltage_NoLoss;

		public String getPot_Voltage_NoLoss() {
			return this.Pot_Voltage_NoLoss;
		}

		public String Test_Value;

		public String getTest_Value() {
			return this.Test_Value;
		}

		public String Instability_Noise;

		public String getInstability_Noise() {
			return this.Instability_Noise;
		}

		public String LiF;

		public String getLiF() {
			return this.LiF;
		}

		public String Cathode_Resistance;

		public String getCathode_Resistance() {
			return this.Cathode_Resistance;
		}

		public String Voltage_Drop_RodeBeam;

		public String getVoltage_Drop_RodeBeam() {
			return this.Voltage_Drop_RodeBeam;
		}

		public String Coltage_Drop_BeamCarbon;

		public String getColtage_Drop_BeamCarbon() {
			return this.Coltage_Drop_BeamCarbon;
		}

		public String NA2O;

		public String getNA2O() {
			return this.NA2O;
		}

		public String PAF300;

		public String getPAF300() {
			return this.PAF300;
		}

		public String Alpha_Alumina;

		public String getAlpha_Alumina() {
			return this.Alpha_Alumina;
		}

		public String CAO;

		public String getCAO() {
			return this.CAO;
		}

		public String GTC1;

		public String getGTC1() {
			return this.GTC1;
		}

		public String GTC2;

		public String getGTC2() {
			return this.GTC2;
		}

		public String GTC3;

		public String getGTC3() {
			return this.GTC3;
		}

		public String GTC4;

		public String getGTC4() {
			return this.GTC4;
		}

		public String ID_Num_Of_Anode_Changed;

		public String getID_Num_Of_Anode_Changed() {
			return this.ID_Num_Of_Anode_Changed;
		}

		public String Additional_Voltage;

		public String getAdditional_Voltage() {
			return this.Additional_Voltage;
		}

		public String Num_Of_FailedCrust_BreakEvents_Daily;

		public String getNum_Of_FailedCrust_BreakEvents_Daily() {
			return this.Num_Of_FailedCrust_BreakEvents_Daily;
		}

		public String Num_Of_Times_In_Tracking_Operation;

		public String getNum_Of_Times_In_Tracking_Operation() {
			return this.Num_Of_Times_In_Tracking_Operation;
		}

		public String Time_In_Manual_Operation_Of_Anode_Beam;

		public String getTime_In_Manual_Operation_Of_Anode_Beam() {
			return this.Time_In_Manual_Operation_Of_Anode_Beam;
		}

		public String Time_In_Tracking_Operation_Min;

		public String getTime_In_Tracking_Operation_Min() {
			return this.Time_In_Tracking_Operation_Min;
		}

		public String Actual_Current;

		public String getActual_Current() {
			return this.Actual_Current;
		}

		public String Over_Voltage;

		public String getOver_Voltage() {
			return this.Over_Voltage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML24HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML24HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML24HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML24HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR) {

				try {

					int length = 0;

					this.Potline = readString(dis);

					this.PotNo = readString(dis);

					this.Date_of_Record = readString(dis);

					this.Pot_Start_Date = readString(dis);

					this.Age_pot_months = readString(dis);

					this.AlF3_excess = readString(dis);

					this.Bath_transferred = readString(dis);

					this.CaF2_perc = readString(dis);

					this.bath_height = readString(dis);

					this.metal_height = readString(dis);

					this.Pot_Current = readString(dis);

					this.Anode_Inc1 = readString(dis);

					this.Anode_Inc2 = readString(dis);

					this.Anode_Inc3 = readString(dis);

					this.Mass_MetalTransfer = readString(dis);

					this.Metal_Tapping_KG = readString(dis);

					this.Manual_Doses_CrustBath = readString(dis);

					this.Automatic_Doses_CrustBath = readString(dis);

					this.Alumina_Doses = readString(dis);

					this.AlF3_Doses_Auto = readString(dis);

					this.AlF3_Doses_Man = readString(dis);

					this.FastFeed_Doses = readString(dis);

					this.Anode_Effect_Average = readString(dis);

					this.Valid_Tests = readString(dis);

					this.Time_To_Anode_effect_Min = readString(dis);

					this.Mean_Resistance = readString(dis);

					this.Reference_Resistance = readString(dis);

					this.Bath_Temp = readString(dis);

					this.Fe = readString(dis);

					this.Instability_Time = readString(dis);

					this.LongTerm_Instability_Time = readString(dis);

					this.Si = readString(dis);

					this.Underfeeding_time = readString(dis);

					this.Fast_feeding_time = readString(dis);

					this.Talonaz_Time = readString(dis);

					this.Anode_Effect_Time = readString(dis);

					this.Theo_Feeding_Time = readString(dis);

					this.Ultra_feeding_time = readString(dis);

					this.hood_open_per24hrs = readString(dis);

					this.Cath_Voltage_Drop = readString(dis);

					this.Potline_Voltage_Mean = readString(dis);

					this.Pot_Voltage_NoLoss = readString(dis);

					this.Test_Value = readString(dis);

					this.Instability_Noise = readString(dis);

					this.LiF = readString(dis);

					this.Cathode_Resistance = readString(dis);

					this.Voltage_Drop_RodeBeam = readString(dis);

					this.Coltage_Drop_BeamCarbon = readString(dis);

					this.NA2O = readString(dis);

					this.PAF300 = readString(dis);

					this.Alpha_Alumina = readString(dis);

					this.CAO = readString(dis);

					this.GTC1 = readString(dis);

					this.GTC2 = readString(dis);

					this.GTC3 = readString(dis);

					this.GTC4 = readString(dis);

					this.ID_Num_Of_Anode_Changed = readString(dis);

					this.Additional_Voltage = readString(dis);

					this.Num_Of_FailedCrust_BreakEvents_Daily = readString(dis);

					this.Num_Of_Times_In_Tracking_Operation = readString(dis);

					this.Time_In_Manual_Operation_Of_Anode_Beam = readString(dis);

					this.Time_In_Tracking_Operation_Min = readString(dis);

					this.Actual_Current = readString(dis);

					this.Over_Voltage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Potline, dos);

				// String

				writeString(this.PotNo, dos);

				// String

				writeString(this.Date_of_Record, dos);

				// String

				writeString(this.Pot_Start_Date, dos);

				// String

				writeString(this.Age_pot_months, dos);

				// String

				writeString(this.AlF3_excess, dos);

				// String

				writeString(this.Bath_transferred, dos);

				// String

				writeString(this.CaF2_perc, dos);

				// String

				writeString(this.bath_height, dos);

				// String

				writeString(this.metal_height, dos);

				// String

				writeString(this.Pot_Current, dos);

				// String

				writeString(this.Anode_Inc1, dos);

				// String

				writeString(this.Anode_Inc2, dos);

				// String

				writeString(this.Anode_Inc3, dos);

				// String

				writeString(this.Mass_MetalTransfer, dos);

				// String

				writeString(this.Metal_Tapping_KG, dos);

				// String

				writeString(this.Manual_Doses_CrustBath, dos);

				// String

				writeString(this.Automatic_Doses_CrustBath, dos);

				// String

				writeString(this.Alumina_Doses, dos);

				// String

				writeString(this.AlF3_Doses_Auto, dos);

				// String

				writeString(this.AlF3_Doses_Man, dos);

				// String

				writeString(this.FastFeed_Doses, dos);

				// String

				writeString(this.Anode_Effect_Average, dos);

				// String

				writeString(this.Valid_Tests, dos);

				// String

				writeString(this.Time_To_Anode_effect_Min, dos);

				// String

				writeString(this.Mean_Resistance, dos);

				// String

				writeString(this.Reference_Resistance, dos);

				// String

				writeString(this.Bath_Temp, dos);

				// String

				writeString(this.Fe, dos);

				// String

				writeString(this.Instability_Time, dos);

				// String

				writeString(this.LongTerm_Instability_Time, dos);

				// String

				writeString(this.Si, dos);

				// String

				writeString(this.Underfeeding_time, dos);

				// String

				writeString(this.Fast_feeding_time, dos);

				// String

				writeString(this.Talonaz_Time, dos);

				// String

				writeString(this.Anode_Effect_Time, dos);

				// String

				writeString(this.Theo_Feeding_Time, dos);

				// String

				writeString(this.Ultra_feeding_time, dos);

				// String

				writeString(this.hood_open_per24hrs, dos);

				// String

				writeString(this.Cath_Voltage_Drop, dos);

				// String

				writeString(this.Potline_Voltage_Mean, dos);

				// String

				writeString(this.Pot_Voltage_NoLoss, dos);

				// String

				writeString(this.Test_Value, dos);

				// String

				writeString(this.Instability_Noise, dos);

				// String

				writeString(this.LiF, dos);

				// String

				writeString(this.Cathode_Resistance, dos);

				// String

				writeString(this.Voltage_Drop_RodeBeam, dos);

				// String

				writeString(this.Coltage_Drop_BeamCarbon, dos);

				// String

				writeString(this.NA2O, dos);

				// String

				writeString(this.PAF300, dos);

				// String

				writeString(this.Alpha_Alumina, dos);

				// String

				writeString(this.CAO, dos);

				// String

				writeString(this.GTC1, dos);

				// String

				writeString(this.GTC2, dos);

				// String

				writeString(this.GTC3, dos);

				// String

				writeString(this.GTC4, dos);

				// String

				writeString(this.ID_Num_Of_Anode_Changed, dos);

				// String

				writeString(this.Additional_Voltage, dos);

				// String

				writeString(this.Num_Of_FailedCrust_BreakEvents_Daily, dos);

				// String

				writeString(this.Num_Of_Times_In_Tracking_Operation, dos);

				// String

				writeString(this.Time_In_Manual_Operation_Of_Anode_Beam, dos);

				// String

				writeString(this.Time_In_Tracking_Operation_Min, dos);

				// String

				writeString(this.Actual_Current, dos);

				// String

				writeString(this.Over_Voltage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Potline=" + Potline);
			sb.append(",PotNo=" + PotNo);
			sb.append(",Date_of_Record=" + Date_of_Record);
			sb.append(",Pot_Start_Date=" + Pot_Start_Date);
			sb.append(",Age_pot_months=" + Age_pot_months);
			sb.append(",AlF3_excess=" + AlF3_excess);
			sb.append(",Bath_transferred=" + Bath_transferred);
			sb.append(",CaF2_perc=" + CaF2_perc);
			sb.append(",bath_height=" + bath_height);
			sb.append(",metal_height=" + metal_height);
			sb.append(",Pot_Current=" + Pot_Current);
			sb.append(",Anode_Inc1=" + Anode_Inc1);
			sb.append(",Anode_Inc2=" + Anode_Inc2);
			sb.append(",Anode_Inc3=" + Anode_Inc3);
			sb.append(",Mass_MetalTransfer=" + Mass_MetalTransfer);
			sb.append(",Metal_Tapping_KG=" + Metal_Tapping_KG);
			sb.append(",Manual_Doses_CrustBath=" + Manual_Doses_CrustBath);
			sb.append(",Automatic_Doses_CrustBath=" + Automatic_Doses_CrustBath);
			sb.append(",Alumina_Doses=" + Alumina_Doses);
			sb.append(",AlF3_Doses_Auto=" + AlF3_Doses_Auto);
			sb.append(",AlF3_Doses_Man=" + AlF3_Doses_Man);
			sb.append(",FastFeed_Doses=" + FastFeed_Doses);
			sb.append(",Anode_Effect_Average=" + Anode_Effect_Average);
			sb.append(",Valid_Tests=" + Valid_Tests);
			sb.append(",Time_To_Anode_effect_Min=" + Time_To_Anode_effect_Min);
			sb.append(",Mean_Resistance=" + Mean_Resistance);
			sb.append(",Reference_Resistance=" + Reference_Resistance);
			sb.append(",Bath_Temp=" + Bath_Temp);
			sb.append(",Fe=" + Fe);
			sb.append(",Instability_Time=" + Instability_Time);
			sb.append(",LongTerm_Instability_Time=" + LongTerm_Instability_Time);
			sb.append(",Si=" + Si);
			sb.append(",Underfeeding_time=" + Underfeeding_time);
			sb.append(",Fast_feeding_time=" + Fast_feeding_time);
			sb.append(",Talonaz_Time=" + Talonaz_Time);
			sb.append(",Anode_Effect_Time=" + Anode_Effect_Time);
			sb.append(",Theo_Feeding_Time=" + Theo_Feeding_Time);
			sb.append(",Ultra_feeding_time=" + Ultra_feeding_time);
			sb.append(",hood_open_per24hrs=" + hood_open_per24hrs);
			sb.append(",Cath_Voltage_Drop=" + Cath_Voltage_Drop);
			sb.append(",Potline_Voltage_Mean=" + Potline_Voltage_Mean);
			sb.append(",Pot_Voltage_NoLoss=" + Pot_Voltage_NoLoss);
			sb.append(",Test_Value=" + Test_Value);
			sb.append(",Instability_Noise=" + Instability_Noise);
			sb.append(",LiF=" + LiF);
			sb.append(",Cathode_Resistance=" + Cathode_Resistance);
			sb.append(",Voltage_Drop_RodeBeam=" + Voltage_Drop_RodeBeam);
			sb.append(",Coltage_Drop_BeamCarbon=" + Coltage_Drop_BeamCarbon);
			sb.append(",NA2O=" + NA2O);
			sb.append(",PAF300=" + PAF300);
			sb.append(",Alpha_Alumina=" + Alpha_Alumina);
			sb.append(",CAO=" + CAO);
			sb.append(",GTC1=" + GTC1);
			sb.append(",GTC2=" + GTC2);
			sb.append(",GTC3=" + GTC3);
			sb.append(",GTC4=" + GTC4);
			sb.append(",ID_Num_Of_Anode_Changed=" + ID_Num_Of_Anode_Changed);
			sb.append(",Additional_Voltage=" + Additional_Voltage);
			sb.append(",Num_Of_FailedCrust_BreakEvents_Daily=" + Num_Of_FailedCrust_BreakEvents_Daily);
			sb.append(",Num_Of_Times_In_Tracking_Operation=" + Num_Of_Times_In_Tracking_Operation);
			sb.append(",Time_In_Manual_Operation_Of_Anode_Beam=" + Time_In_Manual_Operation_Of_Anode_Beam);
			sb.append(",Time_In_Tracking_Operation_Min=" + Time_In_Tracking_Operation_Min);
			sb.append(",Actual_Current=" + Actual_Current);
			sb.append(",Over_Voltage=" + Over_Voltage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(resultsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[0];

		public String POTLINE;

		public String getPOTLINE() {
			return this.POTLINE;
		}

		public String POTNO;

		public String getPOTNO() {
			return this.POTNO;
		}

		public String DATE_OF_RECORD;

		public String getDATE_OF_RECORD() {
			return this.DATE_OF_RECORD;
		}

		public String POT_START_DATE;

		public String getPOT_START_DATE() {
			return this.POT_START_DATE;
		}

		public String AGE_POT_MONTHS;

		public String getAGE_POT_MONTHS() {
			return this.AGE_POT_MONTHS;
		}

		public String ALF3_EXCESS;

		public String getALF3_EXCESS() {
			return this.ALF3_EXCESS;
		}

		public String BATH_TRANSFERRED;

		public String getBATH_TRANSFERRED() {
			return this.BATH_TRANSFERRED;
		}

		public String CAF2_PERC;

		public String getCAF2_PERC() {
			return this.CAF2_PERC;
		}

		public String BATH_HEIGHT;

		public String getBATH_HEIGHT() {
			return this.BATH_HEIGHT;
		}

		public String METAL_HEIGHT;

		public String getMETAL_HEIGHT() {
			return this.METAL_HEIGHT;
		}

		public String POT_CURRENT;

		public String getPOT_CURRENT() {
			return this.POT_CURRENT;
		}

		public String ANODE_INC1;

		public String getANODE_INC1() {
			return this.ANODE_INC1;
		}

		public String ANODE_INC2;

		public String getANODE_INC2() {
			return this.ANODE_INC2;
		}

		public String ANODE_INC3;

		public String getANODE_INC3() {
			return this.ANODE_INC3;
		}

		public String MASS_METALTRANSFER;

		public String getMASS_METALTRANSFER() {
			return this.MASS_METALTRANSFER;
		}

		public String METAL_TAPPING_KG;

		public String getMETAL_TAPPING_KG() {
			return this.METAL_TAPPING_KG;
		}

		public String MANUAL_DOSES_CRUSTBATH;

		public String getMANUAL_DOSES_CRUSTBATH() {
			return this.MANUAL_DOSES_CRUSTBATH;
		}

		public String AUTOMATIC_DOSES_CRUSTBATH;

		public String getAUTOMATIC_DOSES_CRUSTBATH() {
			return this.AUTOMATIC_DOSES_CRUSTBATH;
		}

		public String ALUMINA_DOSES;

		public String getALUMINA_DOSES() {
			return this.ALUMINA_DOSES;
		}

		public String ALF3_DOSES_AUTO;

		public String getALF3_DOSES_AUTO() {
			return this.ALF3_DOSES_AUTO;
		}

		public String ALF3_DOSES_MAN;

		public String getALF3_DOSES_MAN() {
			return this.ALF3_DOSES_MAN;
		}

		public String FASTFEED_DOSES;

		public String getFASTFEED_DOSES() {
			return this.FASTFEED_DOSES;
		}

		public String ANODE_EFFECT_AVERAGE;

		public String getANODE_EFFECT_AVERAGE() {
			return this.ANODE_EFFECT_AVERAGE;
		}

		public String VALID_TESTS;

		public String getVALID_TESTS() {
			return this.VALID_TESTS;
		}

		public String TIME_TO_ANODE_EFFECT_MIN;

		public String getTIME_TO_ANODE_EFFECT_MIN() {
			return this.TIME_TO_ANODE_EFFECT_MIN;
		}

		public String MEAN_RESISTANCE;

		public String getMEAN_RESISTANCE() {
			return this.MEAN_RESISTANCE;
		}

		public String REFERENCE_RESISTANCE;

		public String getREFERENCE_RESISTANCE() {
			return this.REFERENCE_RESISTANCE;
		}

		public String BATH_TEMP;

		public String getBATH_TEMP() {
			return this.BATH_TEMP;
		}

		public String FE;

		public String getFE() {
			return this.FE;
		}

		public String INSTABILITY_TIME;

		public String getINSTABILITY_TIME() {
			return this.INSTABILITY_TIME;
		}

		public String LONGTERM_INSTABILITY_TIME;

		public String getLONGTERM_INSTABILITY_TIME() {
			return this.LONGTERM_INSTABILITY_TIME;
		}

		public String SI;

		public String getSI() {
			return this.SI;
		}

		public String UNDERFEEDING_TIME;

		public String getUNDERFEEDING_TIME() {
			return this.UNDERFEEDING_TIME;
		}

		public String FAST_FEEDING_TIME;

		public String getFAST_FEEDING_TIME() {
			return this.FAST_FEEDING_TIME;
		}

		public String TALONAZ_TIME;

		public String getTALONAZ_TIME() {
			return this.TALONAZ_TIME;
		}

		public String ANODE_EFFECT_TIME;

		public String getANODE_EFFECT_TIME() {
			return this.ANODE_EFFECT_TIME;
		}

		public String THEO_FEEDING_TIME;

		public String getTHEO_FEEDING_TIME() {
			return this.THEO_FEEDING_TIME;
		}

		public String ULTRA_FEEDING_TIME;

		public String getULTRA_FEEDING_TIME() {
			return this.ULTRA_FEEDING_TIME;
		}

		public String HOOD_OPEN_PER24HRS;

		public String getHOOD_OPEN_PER24HRS() {
			return this.HOOD_OPEN_PER24HRS;
		}

		public String CATH_VOLTAGE_DROP;

		public String getCATH_VOLTAGE_DROP() {
			return this.CATH_VOLTAGE_DROP;
		}

		public String POTLINE_VOLTAGE_MEAN;

		public String getPOTLINE_VOLTAGE_MEAN() {
			return this.POTLINE_VOLTAGE_MEAN;
		}

		public String POT_VOLTAGE_NOLOSS;

		public String getPOT_VOLTAGE_NOLOSS() {
			return this.POT_VOLTAGE_NOLOSS;
		}

		public String TEST_VALUE;

		public String getTEST_VALUE() {
			return this.TEST_VALUE;
		}

		public String INSTABILITY_NOISE;

		public String getINSTABILITY_NOISE() {
			return this.INSTABILITY_NOISE;
		}

		public String ID_NUM_OF_ANODE_CHANGED;

		public String getID_NUM_OF_ANODE_CHANGED() {
			return this.ID_NUM_OF_ANODE_CHANGED;
		}

		public String ADDITIONAL_VOLTAGE;

		public String getADDITIONAL_VOLTAGE() {
			return this.ADDITIONAL_VOLTAGE;
		}

		public String FAILEDCRUST_BREAKEVENTS_DAILY;

		public String getFAILEDCRUST_BREAKEVENTS_DAILY() {
			return this.FAILEDCRUST_BREAKEVENTS_DAILY;
		}

		public String NO_TIMES_IN_TRACKING_OPERATION;

		public String getNO_TIMES_IN_TRACKING_OPERATION() {
			return this.NO_TIMES_IN_TRACKING_OPERATION;
		}

		public String MANUAL_OPERATION_OF_ANODE_BEAM;

		public String getMANUAL_OPERATION_OF_ANODE_BEAM() {
			return this.MANUAL_OPERATION_OF_ANODE_BEAM;
		}

		public String TIME_IN_TRACKING_OPERATION_MIN;

		public String getTIME_IN_TRACKING_OPERATION_MIN() {
			return this.TIME_IN_TRACKING_OPERATION_MIN;
		}

		public String ACTUA_LCURRENT;

		public String getACTUA_LCURRENT() {
			return this.ACTUA_LCURRENT;
		}

		public String OVER_VOLTAGE;

		public String getOVER_VOLTAGE() {
			return this.OVER_VOLTAGE;
		}

		public String DATE_OF_RECORD1;

		public String getDATE_OF_RECORD1() {
			return this.DATE_OF_RECORD1;
		}

		public String POTLINE1;

		public String getPOTLINE1() {
			return this.POTLINE1;
		}

		public String POTID;

		public String getPOTID() {
			return this.POTID;
		}

		public String LIF;

		public String getLIF() {
			return this.LIF;
		}

		public String CATHODE_RESISTANCE;

		public String getCATHODE_RESISTANCE() {
			return this.CATHODE_RESISTANCE;
		}

		public String VOLTAGE_DROP_RODEBEAM;

		public String getVOLTAGE_DROP_RODEBEAM() {
			return this.VOLTAGE_DROP_RODEBEAM;
		}

		public String COLTAGE_DROP_BEAMCARBON;

		public String getCOLTAGE_DROP_BEAMCARBON() {
			return this.COLTAGE_DROP_BEAMCARBON;
		}

		public String POTLINE2;

		public String getPOTLINE2() {
			return this.POTLINE2;
		}

		public String POTID1;

		public String getPOTID1() {
			return this.POTID1;
		}

		public String DATE_OF_RECORD2;

		public String getDATE_OF_RECORD2() {
			return this.DATE_OF_RECORD2;
		}

		public String NA2O;

		public String getNA2O() {
			return this.NA2O;
		}

		public String PAF300;

		public String getPAF300() {
			return this.PAF300;
		}

		public String ALPHA_ALUMINA;

		public String getALPHA_ALUMINA() {
			return this.ALPHA_ALUMINA;
		}

		public String CAO;

		public String getCAO() {
			return this.CAO;
		}

		public String GTC1;

		public String getGTC1() {
			return this.GTC1;
		}

		public String GTC2;

		public String getGTC2() {
			return this.GTC2;
		}

		public String GTC3;

		public String getGTC3() {
			return this.GTC3;
		}

		public String GTC4;

		public String getGTC4() {
			return this.GTC4;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML24HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML24HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML24HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML24HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR) {

				try {

					int length = 0;

					this.POTLINE = readString(dis);

					this.POTNO = readString(dis);

					this.DATE_OF_RECORD = readString(dis);

					this.POT_START_DATE = readString(dis);

					this.AGE_POT_MONTHS = readString(dis);

					this.ALF3_EXCESS = readString(dis);

					this.BATH_TRANSFERRED = readString(dis);

					this.CAF2_PERC = readString(dis);

					this.BATH_HEIGHT = readString(dis);

					this.METAL_HEIGHT = readString(dis);

					this.POT_CURRENT = readString(dis);

					this.ANODE_INC1 = readString(dis);

					this.ANODE_INC2 = readString(dis);

					this.ANODE_INC3 = readString(dis);

					this.MASS_METALTRANSFER = readString(dis);

					this.METAL_TAPPING_KG = readString(dis);

					this.MANUAL_DOSES_CRUSTBATH = readString(dis);

					this.AUTOMATIC_DOSES_CRUSTBATH = readString(dis);

					this.ALUMINA_DOSES = readString(dis);

					this.ALF3_DOSES_AUTO = readString(dis);

					this.ALF3_DOSES_MAN = readString(dis);

					this.FASTFEED_DOSES = readString(dis);

					this.ANODE_EFFECT_AVERAGE = readString(dis);

					this.VALID_TESTS = readString(dis);

					this.TIME_TO_ANODE_EFFECT_MIN = readString(dis);

					this.MEAN_RESISTANCE = readString(dis);

					this.REFERENCE_RESISTANCE = readString(dis);

					this.BATH_TEMP = readString(dis);

					this.FE = readString(dis);

					this.INSTABILITY_TIME = readString(dis);

					this.LONGTERM_INSTABILITY_TIME = readString(dis);

					this.SI = readString(dis);

					this.UNDERFEEDING_TIME = readString(dis);

					this.FAST_FEEDING_TIME = readString(dis);

					this.TALONAZ_TIME = readString(dis);

					this.ANODE_EFFECT_TIME = readString(dis);

					this.THEO_FEEDING_TIME = readString(dis);

					this.ULTRA_FEEDING_TIME = readString(dis);

					this.HOOD_OPEN_PER24HRS = readString(dis);

					this.CATH_VOLTAGE_DROP = readString(dis);

					this.POTLINE_VOLTAGE_MEAN = readString(dis);

					this.POT_VOLTAGE_NOLOSS = readString(dis);

					this.TEST_VALUE = readString(dis);

					this.INSTABILITY_NOISE = readString(dis);

					this.ID_NUM_OF_ANODE_CHANGED = readString(dis);

					this.ADDITIONAL_VOLTAGE = readString(dis);

					this.FAILEDCRUST_BREAKEVENTS_DAILY = readString(dis);

					this.NO_TIMES_IN_TRACKING_OPERATION = readString(dis);

					this.MANUAL_OPERATION_OF_ANODE_BEAM = readString(dis);

					this.TIME_IN_TRACKING_OPERATION_MIN = readString(dis);

					this.ACTUA_LCURRENT = readString(dis);

					this.OVER_VOLTAGE = readString(dis);

					this.DATE_OF_RECORD1 = readString(dis);

					this.POTLINE1 = readString(dis);

					this.POTID = readString(dis);

					this.LIF = readString(dis);

					this.CATHODE_RESISTANCE = readString(dis);

					this.VOLTAGE_DROP_RODEBEAM = readString(dis);

					this.COLTAGE_DROP_BEAMCARBON = readString(dis);

					this.POTLINE2 = readString(dis);

					this.POTID1 = readString(dis);

					this.DATE_OF_RECORD2 = readString(dis);

					this.NA2O = readString(dis);

					this.PAF300 = readString(dis);

					this.ALPHA_ALUMINA = readString(dis);

					this.CAO = readString(dis);

					this.GTC1 = readString(dis);

					this.GTC2 = readString(dis);

					this.GTC3 = readString(dis);

					this.GTC4 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.POTLINE, dos);

				// String

				writeString(this.POTNO, dos);

				// String

				writeString(this.DATE_OF_RECORD, dos);

				// String

				writeString(this.POT_START_DATE, dos);

				// String

				writeString(this.AGE_POT_MONTHS, dos);

				// String

				writeString(this.ALF3_EXCESS, dos);

				// String

				writeString(this.BATH_TRANSFERRED, dos);

				// String

				writeString(this.CAF2_PERC, dos);

				// String

				writeString(this.BATH_HEIGHT, dos);

				// String

				writeString(this.METAL_HEIGHT, dos);

				// String

				writeString(this.POT_CURRENT, dos);

				// String

				writeString(this.ANODE_INC1, dos);

				// String

				writeString(this.ANODE_INC2, dos);

				// String

				writeString(this.ANODE_INC3, dos);

				// String

				writeString(this.MASS_METALTRANSFER, dos);

				// String

				writeString(this.METAL_TAPPING_KG, dos);

				// String

				writeString(this.MANUAL_DOSES_CRUSTBATH, dos);

				// String

				writeString(this.AUTOMATIC_DOSES_CRUSTBATH, dos);

				// String

				writeString(this.ALUMINA_DOSES, dos);

				// String

				writeString(this.ALF3_DOSES_AUTO, dos);

				// String

				writeString(this.ALF3_DOSES_MAN, dos);

				// String

				writeString(this.FASTFEED_DOSES, dos);

				// String

				writeString(this.ANODE_EFFECT_AVERAGE, dos);

				// String

				writeString(this.VALID_TESTS, dos);

				// String

				writeString(this.TIME_TO_ANODE_EFFECT_MIN, dos);

				// String

				writeString(this.MEAN_RESISTANCE, dos);

				// String

				writeString(this.REFERENCE_RESISTANCE, dos);

				// String

				writeString(this.BATH_TEMP, dos);

				// String

				writeString(this.FE, dos);

				// String

				writeString(this.INSTABILITY_TIME, dos);

				// String

				writeString(this.LONGTERM_INSTABILITY_TIME, dos);

				// String

				writeString(this.SI, dos);

				// String

				writeString(this.UNDERFEEDING_TIME, dos);

				// String

				writeString(this.FAST_FEEDING_TIME, dos);

				// String

				writeString(this.TALONAZ_TIME, dos);

				// String

				writeString(this.ANODE_EFFECT_TIME, dos);

				// String

				writeString(this.THEO_FEEDING_TIME, dos);

				// String

				writeString(this.ULTRA_FEEDING_TIME, dos);

				// String

				writeString(this.HOOD_OPEN_PER24HRS, dos);

				// String

				writeString(this.CATH_VOLTAGE_DROP, dos);

				// String

				writeString(this.POTLINE_VOLTAGE_MEAN, dos);

				// String

				writeString(this.POT_VOLTAGE_NOLOSS, dos);

				// String

				writeString(this.TEST_VALUE, dos);

				// String

				writeString(this.INSTABILITY_NOISE, dos);

				// String

				writeString(this.ID_NUM_OF_ANODE_CHANGED, dos);

				// String

				writeString(this.ADDITIONAL_VOLTAGE, dos);

				// String

				writeString(this.FAILEDCRUST_BREAKEVENTS_DAILY, dos);

				// String

				writeString(this.NO_TIMES_IN_TRACKING_OPERATION, dos);

				// String

				writeString(this.MANUAL_OPERATION_OF_ANODE_BEAM, dos);

				// String

				writeString(this.TIME_IN_TRACKING_OPERATION_MIN, dos);

				// String

				writeString(this.ACTUA_LCURRENT, dos);

				// String

				writeString(this.OVER_VOLTAGE, dos);

				// String

				writeString(this.DATE_OF_RECORD1, dos);

				// String

				writeString(this.POTLINE1, dos);

				// String

				writeString(this.POTID, dos);

				// String

				writeString(this.LIF, dos);

				// String

				writeString(this.CATHODE_RESISTANCE, dos);

				// String

				writeString(this.VOLTAGE_DROP_RODEBEAM, dos);

				// String

				writeString(this.COLTAGE_DROP_BEAMCARBON, dos);

				// String

				writeString(this.POTLINE2, dos);

				// String

				writeString(this.POTID1, dos);

				// String

				writeString(this.DATE_OF_RECORD2, dos);

				// String

				writeString(this.NA2O, dos);

				// String

				writeString(this.PAF300, dos);

				// String

				writeString(this.ALPHA_ALUMINA, dos);

				// String

				writeString(this.CAO, dos);

				// String

				writeString(this.GTC1, dos);

				// String

				writeString(this.GTC2, dos);

				// String

				writeString(this.GTC3, dos);

				// String

				writeString(this.GTC4, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("POTLINE=" + POTLINE);
			sb.append(",POTNO=" + POTNO);
			sb.append(",DATE_OF_RECORD=" + DATE_OF_RECORD);
			sb.append(",POT_START_DATE=" + POT_START_DATE);
			sb.append(",AGE_POT_MONTHS=" + AGE_POT_MONTHS);
			sb.append(",ALF3_EXCESS=" + ALF3_EXCESS);
			sb.append(",BATH_TRANSFERRED=" + BATH_TRANSFERRED);
			sb.append(",CAF2_PERC=" + CAF2_PERC);
			sb.append(",BATH_HEIGHT=" + BATH_HEIGHT);
			sb.append(",METAL_HEIGHT=" + METAL_HEIGHT);
			sb.append(",POT_CURRENT=" + POT_CURRENT);
			sb.append(",ANODE_INC1=" + ANODE_INC1);
			sb.append(",ANODE_INC2=" + ANODE_INC2);
			sb.append(",ANODE_INC3=" + ANODE_INC3);
			sb.append(",MASS_METALTRANSFER=" + MASS_METALTRANSFER);
			sb.append(",METAL_TAPPING_KG=" + METAL_TAPPING_KG);
			sb.append(",MANUAL_DOSES_CRUSTBATH=" + MANUAL_DOSES_CRUSTBATH);
			sb.append(",AUTOMATIC_DOSES_CRUSTBATH=" + AUTOMATIC_DOSES_CRUSTBATH);
			sb.append(",ALUMINA_DOSES=" + ALUMINA_DOSES);
			sb.append(",ALF3_DOSES_AUTO=" + ALF3_DOSES_AUTO);
			sb.append(",ALF3_DOSES_MAN=" + ALF3_DOSES_MAN);
			sb.append(",FASTFEED_DOSES=" + FASTFEED_DOSES);
			sb.append(",ANODE_EFFECT_AVERAGE=" + ANODE_EFFECT_AVERAGE);
			sb.append(",VALID_TESTS=" + VALID_TESTS);
			sb.append(",TIME_TO_ANODE_EFFECT_MIN=" + TIME_TO_ANODE_EFFECT_MIN);
			sb.append(",MEAN_RESISTANCE=" + MEAN_RESISTANCE);
			sb.append(",REFERENCE_RESISTANCE=" + REFERENCE_RESISTANCE);
			sb.append(",BATH_TEMP=" + BATH_TEMP);
			sb.append(",FE=" + FE);
			sb.append(",INSTABILITY_TIME=" + INSTABILITY_TIME);
			sb.append(",LONGTERM_INSTABILITY_TIME=" + LONGTERM_INSTABILITY_TIME);
			sb.append(",SI=" + SI);
			sb.append(",UNDERFEEDING_TIME=" + UNDERFEEDING_TIME);
			sb.append(",FAST_FEEDING_TIME=" + FAST_FEEDING_TIME);
			sb.append(",TALONAZ_TIME=" + TALONAZ_TIME);
			sb.append(",ANODE_EFFECT_TIME=" + ANODE_EFFECT_TIME);
			sb.append(",THEO_FEEDING_TIME=" + THEO_FEEDING_TIME);
			sb.append(",ULTRA_FEEDING_TIME=" + ULTRA_FEEDING_TIME);
			sb.append(",HOOD_OPEN_PER24HRS=" + HOOD_OPEN_PER24HRS);
			sb.append(",CATH_VOLTAGE_DROP=" + CATH_VOLTAGE_DROP);
			sb.append(",POTLINE_VOLTAGE_MEAN=" + POTLINE_VOLTAGE_MEAN);
			sb.append(",POT_VOLTAGE_NOLOSS=" + POT_VOLTAGE_NOLOSS);
			sb.append(",TEST_VALUE=" + TEST_VALUE);
			sb.append(",INSTABILITY_NOISE=" + INSTABILITY_NOISE);
			sb.append(",ID_NUM_OF_ANODE_CHANGED=" + ID_NUM_OF_ANODE_CHANGED);
			sb.append(",ADDITIONAL_VOLTAGE=" + ADDITIONAL_VOLTAGE);
			sb.append(",FAILEDCRUST_BREAKEVENTS_DAILY=" + FAILEDCRUST_BREAKEVENTS_DAILY);
			sb.append(",NO_TIMES_IN_TRACKING_OPERATION=" + NO_TIMES_IN_TRACKING_OPERATION);
			sb.append(",MANUAL_OPERATION_OF_ANODE_BEAM=" + MANUAL_OPERATION_OF_ANODE_BEAM);
			sb.append(",TIME_IN_TRACKING_OPERATION_MIN=" + TIME_IN_TRACKING_OPERATION_MIN);
			sb.append(",ACTUA_LCURRENT=" + ACTUA_LCURRENT);
			sb.append(",OVER_VOLTAGE=" + OVER_VOLTAGE);
			sb.append(",DATE_OF_RECORD1=" + DATE_OF_RECORD1);
			sb.append(",POTLINE1=" + POTLINE1);
			sb.append(",POTID=" + POTID);
			sb.append(",LIF=" + LIF);
			sb.append(",CATHODE_RESISTANCE=" + CATHODE_RESISTANCE);
			sb.append(",VOLTAGE_DROP_RODEBEAM=" + VOLTAGE_DROP_RODEBEAM);
			sb.append(",COLTAGE_DROP_BEAMCARBON=" + COLTAGE_DROP_BEAMCARBON);
			sb.append(",POTLINE2=" + POTLINE2);
			sb.append(",POTID1=" + POTID1);
			sb.append(",DATE_OF_RECORD2=" + DATE_OF_RECORD2);
			sb.append(",NA2O=" + NA2O);
			sb.append(",PAF300=" + PAF300);
			sb.append(",ALPHA_ALUMINA=" + ALPHA_ALUMINA);
			sb.append(",CAO=" + CAO);
			sb.append(",GTC1=" + GTC1);
			sb.append(",GTC2=" + GTC2);
			sb.append(",GTC3=" + GTC3);
			sb.append(",GTC4=" + GTC4);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[0];

		public String POTLINE;

		public String getPOTLINE() {
			return this.POTLINE;
		}

		public String POTNO;

		public String getPOTNO() {
			return this.POTNO;
		}

		public String DATE_OF_RECORD;

		public String getDATE_OF_RECORD() {
			return this.DATE_OF_RECORD;
		}

		public String POT_START_DATE;

		public String getPOT_START_DATE() {
			return this.POT_START_DATE;
		}

		public String AGE_POT_MONTHS;

		public String getAGE_POT_MONTHS() {
			return this.AGE_POT_MONTHS;
		}

		public String ALF3_EXCESS;

		public String getALF3_EXCESS() {
			return this.ALF3_EXCESS;
		}

		public String BATH_TRANSFERRED;

		public String getBATH_TRANSFERRED() {
			return this.BATH_TRANSFERRED;
		}

		public String CAF2_PERC;

		public String getCAF2_PERC() {
			return this.CAF2_PERC;
		}

		public String BATH_HEIGHT;

		public String getBATH_HEIGHT() {
			return this.BATH_HEIGHT;
		}

		public String METAL_HEIGHT;

		public String getMETAL_HEIGHT() {
			return this.METAL_HEIGHT;
		}

		public String POT_CURRENT;

		public String getPOT_CURRENT() {
			return this.POT_CURRENT;
		}

		public String ANODE_INC1;

		public String getANODE_INC1() {
			return this.ANODE_INC1;
		}

		public String ANODE_INC2;

		public String getANODE_INC2() {
			return this.ANODE_INC2;
		}

		public String ANODE_INC3;

		public String getANODE_INC3() {
			return this.ANODE_INC3;
		}

		public String MASS_METALTRANSFER;

		public String getMASS_METALTRANSFER() {
			return this.MASS_METALTRANSFER;
		}

		public String METAL_TAPPING_KG;

		public String getMETAL_TAPPING_KG() {
			return this.METAL_TAPPING_KG;
		}

		public String MANUAL_DOSES_CRUSTBATH;

		public String getMANUAL_DOSES_CRUSTBATH() {
			return this.MANUAL_DOSES_CRUSTBATH;
		}

		public String AUTOMATIC_DOSES_CRUSTBATH;

		public String getAUTOMATIC_DOSES_CRUSTBATH() {
			return this.AUTOMATIC_DOSES_CRUSTBATH;
		}

		public String ALUMINA_DOSES;

		public String getALUMINA_DOSES() {
			return this.ALUMINA_DOSES;
		}

		public String ALF3_DOSES_AUTO;

		public String getALF3_DOSES_AUTO() {
			return this.ALF3_DOSES_AUTO;
		}

		public String ALF3_DOSES_MAN;

		public String getALF3_DOSES_MAN() {
			return this.ALF3_DOSES_MAN;
		}

		public String FASTFEED_DOSES;

		public String getFASTFEED_DOSES() {
			return this.FASTFEED_DOSES;
		}

		public String ANODE_EFFECT_AVERAGE;

		public String getANODE_EFFECT_AVERAGE() {
			return this.ANODE_EFFECT_AVERAGE;
		}

		public String VALID_TESTS;

		public String getVALID_TESTS() {
			return this.VALID_TESTS;
		}

		public String TIME_TO_ANODE_EFFECT_MIN;

		public String getTIME_TO_ANODE_EFFECT_MIN() {
			return this.TIME_TO_ANODE_EFFECT_MIN;
		}

		public String MEAN_RESISTANCE;

		public String getMEAN_RESISTANCE() {
			return this.MEAN_RESISTANCE;
		}

		public String REFERENCE_RESISTANCE;

		public String getREFERENCE_RESISTANCE() {
			return this.REFERENCE_RESISTANCE;
		}

		public String BATH_TEMP;

		public String getBATH_TEMP() {
			return this.BATH_TEMP;
		}

		public String FE;

		public String getFE() {
			return this.FE;
		}

		public String INSTABILITY_TIME;

		public String getINSTABILITY_TIME() {
			return this.INSTABILITY_TIME;
		}

		public String LONGTERM_INSTABILITY_TIME;

		public String getLONGTERM_INSTABILITY_TIME() {
			return this.LONGTERM_INSTABILITY_TIME;
		}

		public String SI;

		public String getSI() {
			return this.SI;
		}

		public String UNDERFEEDING_TIME;

		public String getUNDERFEEDING_TIME() {
			return this.UNDERFEEDING_TIME;
		}

		public String FAST_FEEDING_TIME;

		public String getFAST_FEEDING_TIME() {
			return this.FAST_FEEDING_TIME;
		}

		public String TALONAZ_TIME;

		public String getTALONAZ_TIME() {
			return this.TALONAZ_TIME;
		}

		public String ANODE_EFFECT_TIME;

		public String getANODE_EFFECT_TIME() {
			return this.ANODE_EFFECT_TIME;
		}

		public String THEO_FEEDING_TIME;

		public String getTHEO_FEEDING_TIME() {
			return this.THEO_FEEDING_TIME;
		}

		public String ULTRA_FEEDING_TIME;

		public String getULTRA_FEEDING_TIME() {
			return this.ULTRA_FEEDING_TIME;
		}

		public String HOOD_OPEN_PER24HRS;

		public String getHOOD_OPEN_PER24HRS() {
			return this.HOOD_OPEN_PER24HRS;
		}

		public String CATH_VOLTAGE_DROP;

		public String getCATH_VOLTAGE_DROP() {
			return this.CATH_VOLTAGE_DROP;
		}

		public String POTLINE_VOLTAGE_MEAN;

		public String getPOTLINE_VOLTAGE_MEAN() {
			return this.POTLINE_VOLTAGE_MEAN;
		}

		public String POT_VOLTAGE_NOLOSS;

		public String getPOT_VOLTAGE_NOLOSS() {
			return this.POT_VOLTAGE_NOLOSS;
		}

		public String TEST_VALUE;

		public String getTEST_VALUE() {
			return this.TEST_VALUE;
		}

		public String INSTABILITY_NOISE;

		public String getINSTABILITY_NOISE() {
			return this.INSTABILITY_NOISE;
		}

		public String ID_NUM_OF_ANODE_CHANGED;

		public String getID_NUM_OF_ANODE_CHANGED() {
			return this.ID_NUM_OF_ANODE_CHANGED;
		}

		public String ADDITIONAL_VOLTAGE;

		public String getADDITIONAL_VOLTAGE() {
			return this.ADDITIONAL_VOLTAGE;
		}

		public String FAILEDCRUST_BREAKEVENTS_DAILY;

		public String getFAILEDCRUST_BREAKEVENTS_DAILY() {
			return this.FAILEDCRUST_BREAKEVENTS_DAILY;
		}

		public String NO_TIMES_IN_TRACKING_OPERATION;

		public String getNO_TIMES_IN_TRACKING_OPERATION() {
			return this.NO_TIMES_IN_TRACKING_OPERATION;
		}

		public String MANUAL_OPERATION_OF_ANODE_BEAM;

		public String getMANUAL_OPERATION_OF_ANODE_BEAM() {
			return this.MANUAL_OPERATION_OF_ANODE_BEAM;
		}

		public String TIME_IN_TRACKING_OPERATION_MIN;

		public String getTIME_IN_TRACKING_OPERATION_MIN() {
			return this.TIME_IN_TRACKING_OPERATION_MIN;
		}

		public String ACTUA_LCURRENT;

		public String getACTUA_LCURRENT() {
			return this.ACTUA_LCURRENT;
		}

		public String OVER_VOLTAGE;

		public String getOVER_VOLTAGE() {
			return this.OVER_VOLTAGE;
		}

		public String DATE_OF_RECORD1;

		public String getDATE_OF_RECORD1() {
			return this.DATE_OF_RECORD1;
		}

		public String POTLINE1;

		public String getPOTLINE1() {
			return this.POTLINE1;
		}

		public String POTID;

		public String getPOTID() {
			return this.POTID;
		}

		public String LIF;

		public String getLIF() {
			return this.LIF;
		}

		public String CATHODE_RESISTANCE;

		public String getCATHODE_RESISTANCE() {
			return this.CATHODE_RESISTANCE;
		}

		public String VOLTAGE_DROP_RODEBEAM;

		public String getVOLTAGE_DROP_RODEBEAM() {
			return this.VOLTAGE_DROP_RODEBEAM;
		}

		public String COLTAGE_DROP_BEAMCARBON;

		public String getCOLTAGE_DROP_BEAMCARBON() {
			return this.COLTAGE_DROP_BEAMCARBON;
		}

		public String POTLINE2;

		public String getPOTLINE2() {
			return this.POTLINE2;
		}

		public String POTID1;

		public String getPOTID1() {
			return this.POTID1;
		}

		public String DATE_OF_RECORD2;

		public String getDATE_OF_RECORD2() {
			return this.DATE_OF_RECORD2;
		}

		public String NA2O;

		public String getNA2O() {
			return this.NA2O;
		}

		public String PAF300;

		public String getPAF300() {
			return this.PAF300;
		}

		public String ALPHA_ALUMINA;

		public String getALPHA_ALUMINA() {
			return this.ALPHA_ALUMINA;
		}

		public String CAO;

		public String getCAO() {
			return this.CAO;
		}

		public String GTC1;

		public String getGTC1() {
			return this.GTC1;
		}

		public String GTC2;

		public String getGTC2() {
			return this.GTC2;
		}

		public String GTC3;

		public String getGTC3() {
			return this.GTC3;
		}

		public String GTC4;

		public String getGTC4() {
			return this.GTC4;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML24HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML24HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML24HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML24HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR) {

				try {

					int length = 0;

					this.POTLINE = readString(dis);

					this.POTNO = readString(dis);

					this.DATE_OF_RECORD = readString(dis);

					this.POT_START_DATE = readString(dis);

					this.AGE_POT_MONTHS = readString(dis);

					this.ALF3_EXCESS = readString(dis);

					this.BATH_TRANSFERRED = readString(dis);

					this.CAF2_PERC = readString(dis);

					this.BATH_HEIGHT = readString(dis);

					this.METAL_HEIGHT = readString(dis);

					this.POT_CURRENT = readString(dis);

					this.ANODE_INC1 = readString(dis);

					this.ANODE_INC2 = readString(dis);

					this.ANODE_INC3 = readString(dis);

					this.MASS_METALTRANSFER = readString(dis);

					this.METAL_TAPPING_KG = readString(dis);

					this.MANUAL_DOSES_CRUSTBATH = readString(dis);

					this.AUTOMATIC_DOSES_CRUSTBATH = readString(dis);

					this.ALUMINA_DOSES = readString(dis);

					this.ALF3_DOSES_AUTO = readString(dis);

					this.ALF3_DOSES_MAN = readString(dis);

					this.FASTFEED_DOSES = readString(dis);

					this.ANODE_EFFECT_AVERAGE = readString(dis);

					this.VALID_TESTS = readString(dis);

					this.TIME_TO_ANODE_EFFECT_MIN = readString(dis);

					this.MEAN_RESISTANCE = readString(dis);

					this.REFERENCE_RESISTANCE = readString(dis);

					this.BATH_TEMP = readString(dis);

					this.FE = readString(dis);

					this.INSTABILITY_TIME = readString(dis);

					this.LONGTERM_INSTABILITY_TIME = readString(dis);

					this.SI = readString(dis);

					this.UNDERFEEDING_TIME = readString(dis);

					this.FAST_FEEDING_TIME = readString(dis);

					this.TALONAZ_TIME = readString(dis);

					this.ANODE_EFFECT_TIME = readString(dis);

					this.THEO_FEEDING_TIME = readString(dis);

					this.ULTRA_FEEDING_TIME = readString(dis);

					this.HOOD_OPEN_PER24HRS = readString(dis);

					this.CATH_VOLTAGE_DROP = readString(dis);

					this.POTLINE_VOLTAGE_MEAN = readString(dis);

					this.POT_VOLTAGE_NOLOSS = readString(dis);

					this.TEST_VALUE = readString(dis);

					this.INSTABILITY_NOISE = readString(dis);

					this.ID_NUM_OF_ANODE_CHANGED = readString(dis);

					this.ADDITIONAL_VOLTAGE = readString(dis);

					this.FAILEDCRUST_BREAKEVENTS_DAILY = readString(dis);

					this.NO_TIMES_IN_TRACKING_OPERATION = readString(dis);

					this.MANUAL_OPERATION_OF_ANODE_BEAM = readString(dis);

					this.TIME_IN_TRACKING_OPERATION_MIN = readString(dis);

					this.ACTUA_LCURRENT = readString(dis);

					this.OVER_VOLTAGE = readString(dis);

					this.DATE_OF_RECORD1 = readString(dis);

					this.POTLINE1 = readString(dis);

					this.POTID = readString(dis);

					this.LIF = readString(dis);

					this.CATHODE_RESISTANCE = readString(dis);

					this.VOLTAGE_DROP_RODEBEAM = readString(dis);

					this.COLTAGE_DROP_BEAMCARBON = readString(dis);

					this.POTLINE2 = readString(dis);

					this.POTID1 = readString(dis);

					this.DATE_OF_RECORD2 = readString(dis);

					this.NA2O = readString(dis);

					this.PAF300 = readString(dis);

					this.ALPHA_ALUMINA = readString(dis);

					this.CAO = readString(dis);

					this.GTC1 = readString(dis);

					this.GTC2 = readString(dis);

					this.GTC3 = readString(dis);

					this.GTC4 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.POTLINE, dos);

				// String

				writeString(this.POTNO, dos);

				// String

				writeString(this.DATE_OF_RECORD, dos);

				// String

				writeString(this.POT_START_DATE, dos);

				// String

				writeString(this.AGE_POT_MONTHS, dos);

				// String

				writeString(this.ALF3_EXCESS, dos);

				// String

				writeString(this.BATH_TRANSFERRED, dos);

				// String

				writeString(this.CAF2_PERC, dos);

				// String

				writeString(this.BATH_HEIGHT, dos);

				// String

				writeString(this.METAL_HEIGHT, dos);

				// String

				writeString(this.POT_CURRENT, dos);

				// String

				writeString(this.ANODE_INC1, dos);

				// String

				writeString(this.ANODE_INC2, dos);

				// String

				writeString(this.ANODE_INC3, dos);

				// String

				writeString(this.MASS_METALTRANSFER, dos);

				// String

				writeString(this.METAL_TAPPING_KG, dos);

				// String

				writeString(this.MANUAL_DOSES_CRUSTBATH, dos);

				// String

				writeString(this.AUTOMATIC_DOSES_CRUSTBATH, dos);

				// String

				writeString(this.ALUMINA_DOSES, dos);

				// String

				writeString(this.ALF3_DOSES_AUTO, dos);

				// String

				writeString(this.ALF3_DOSES_MAN, dos);

				// String

				writeString(this.FASTFEED_DOSES, dos);

				// String

				writeString(this.ANODE_EFFECT_AVERAGE, dos);

				// String

				writeString(this.VALID_TESTS, dos);

				// String

				writeString(this.TIME_TO_ANODE_EFFECT_MIN, dos);

				// String

				writeString(this.MEAN_RESISTANCE, dos);

				// String

				writeString(this.REFERENCE_RESISTANCE, dos);

				// String

				writeString(this.BATH_TEMP, dos);

				// String

				writeString(this.FE, dos);

				// String

				writeString(this.INSTABILITY_TIME, dos);

				// String

				writeString(this.LONGTERM_INSTABILITY_TIME, dos);

				// String

				writeString(this.SI, dos);

				// String

				writeString(this.UNDERFEEDING_TIME, dos);

				// String

				writeString(this.FAST_FEEDING_TIME, dos);

				// String

				writeString(this.TALONAZ_TIME, dos);

				// String

				writeString(this.ANODE_EFFECT_TIME, dos);

				// String

				writeString(this.THEO_FEEDING_TIME, dos);

				// String

				writeString(this.ULTRA_FEEDING_TIME, dos);

				// String

				writeString(this.HOOD_OPEN_PER24HRS, dos);

				// String

				writeString(this.CATH_VOLTAGE_DROP, dos);

				// String

				writeString(this.POTLINE_VOLTAGE_MEAN, dos);

				// String

				writeString(this.POT_VOLTAGE_NOLOSS, dos);

				// String

				writeString(this.TEST_VALUE, dos);

				// String

				writeString(this.INSTABILITY_NOISE, dos);

				// String

				writeString(this.ID_NUM_OF_ANODE_CHANGED, dos);

				// String

				writeString(this.ADDITIONAL_VOLTAGE, dos);

				// String

				writeString(this.FAILEDCRUST_BREAKEVENTS_DAILY, dos);

				// String

				writeString(this.NO_TIMES_IN_TRACKING_OPERATION, dos);

				// String

				writeString(this.MANUAL_OPERATION_OF_ANODE_BEAM, dos);

				// String

				writeString(this.TIME_IN_TRACKING_OPERATION_MIN, dos);

				// String

				writeString(this.ACTUA_LCURRENT, dos);

				// String

				writeString(this.OVER_VOLTAGE, dos);

				// String

				writeString(this.DATE_OF_RECORD1, dos);

				// String

				writeString(this.POTLINE1, dos);

				// String

				writeString(this.POTID, dos);

				// String

				writeString(this.LIF, dos);

				// String

				writeString(this.CATHODE_RESISTANCE, dos);

				// String

				writeString(this.VOLTAGE_DROP_RODEBEAM, dos);

				// String

				writeString(this.COLTAGE_DROP_BEAMCARBON, dos);

				// String

				writeString(this.POTLINE2, dos);

				// String

				writeString(this.POTID1, dos);

				// String

				writeString(this.DATE_OF_RECORD2, dos);

				// String

				writeString(this.NA2O, dos);

				// String

				writeString(this.PAF300, dos);

				// String

				writeString(this.ALPHA_ALUMINA, dos);

				// String

				writeString(this.CAO, dos);

				// String

				writeString(this.GTC1, dos);

				// String

				writeString(this.GTC2, dos);

				// String

				writeString(this.GTC3, dos);

				// String

				writeString(this.GTC4, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("POTLINE=" + POTLINE);
			sb.append(",POTNO=" + POTNO);
			sb.append(",DATE_OF_RECORD=" + DATE_OF_RECORD);
			sb.append(",POT_START_DATE=" + POT_START_DATE);
			sb.append(",AGE_POT_MONTHS=" + AGE_POT_MONTHS);
			sb.append(",ALF3_EXCESS=" + ALF3_EXCESS);
			sb.append(",BATH_TRANSFERRED=" + BATH_TRANSFERRED);
			sb.append(",CAF2_PERC=" + CAF2_PERC);
			sb.append(",BATH_HEIGHT=" + BATH_HEIGHT);
			sb.append(",METAL_HEIGHT=" + METAL_HEIGHT);
			sb.append(",POT_CURRENT=" + POT_CURRENT);
			sb.append(",ANODE_INC1=" + ANODE_INC1);
			sb.append(",ANODE_INC2=" + ANODE_INC2);
			sb.append(",ANODE_INC3=" + ANODE_INC3);
			sb.append(",MASS_METALTRANSFER=" + MASS_METALTRANSFER);
			sb.append(",METAL_TAPPING_KG=" + METAL_TAPPING_KG);
			sb.append(",MANUAL_DOSES_CRUSTBATH=" + MANUAL_DOSES_CRUSTBATH);
			sb.append(",AUTOMATIC_DOSES_CRUSTBATH=" + AUTOMATIC_DOSES_CRUSTBATH);
			sb.append(",ALUMINA_DOSES=" + ALUMINA_DOSES);
			sb.append(",ALF3_DOSES_AUTO=" + ALF3_DOSES_AUTO);
			sb.append(",ALF3_DOSES_MAN=" + ALF3_DOSES_MAN);
			sb.append(",FASTFEED_DOSES=" + FASTFEED_DOSES);
			sb.append(",ANODE_EFFECT_AVERAGE=" + ANODE_EFFECT_AVERAGE);
			sb.append(",VALID_TESTS=" + VALID_TESTS);
			sb.append(",TIME_TO_ANODE_EFFECT_MIN=" + TIME_TO_ANODE_EFFECT_MIN);
			sb.append(",MEAN_RESISTANCE=" + MEAN_RESISTANCE);
			sb.append(",REFERENCE_RESISTANCE=" + REFERENCE_RESISTANCE);
			sb.append(",BATH_TEMP=" + BATH_TEMP);
			sb.append(",FE=" + FE);
			sb.append(",INSTABILITY_TIME=" + INSTABILITY_TIME);
			sb.append(",LONGTERM_INSTABILITY_TIME=" + LONGTERM_INSTABILITY_TIME);
			sb.append(",SI=" + SI);
			sb.append(",UNDERFEEDING_TIME=" + UNDERFEEDING_TIME);
			sb.append(",FAST_FEEDING_TIME=" + FAST_FEEDING_TIME);
			sb.append(",TALONAZ_TIME=" + TALONAZ_TIME);
			sb.append(",ANODE_EFFECT_TIME=" + ANODE_EFFECT_TIME);
			sb.append(",THEO_FEEDING_TIME=" + THEO_FEEDING_TIME);
			sb.append(",ULTRA_FEEDING_TIME=" + ULTRA_FEEDING_TIME);
			sb.append(",HOOD_OPEN_PER24HRS=" + HOOD_OPEN_PER24HRS);
			sb.append(",CATH_VOLTAGE_DROP=" + CATH_VOLTAGE_DROP);
			sb.append(",POTLINE_VOLTAGE_MEAN=" + POTLINE_VOLTAGE_MEAN);
			sb.append(",POT_VOLTAGE_NOLOSS=" + POT_VOLTAGE_NOLOSS);
			sb.append(",TEST_VALUE=" + TEST_VALUE);
			sb.append(",INSTABILITY_NOISE=" + INSTABILITY_NOISE);
			sb.append(",ID_NUM_OF_ANODE_CHANGED=" + ID_NUM_OF_ANODE_CHANGED);
			sb.append(",ADDITIONAL_VOLTAGE=" + ADDITIONAL_VOLTAGE);
			sb.append(",FAILEDCRUST_BREAKEVENTS_DAILY=" + FAILEDCRUST_BREAKEVENTS_DAILY);
			sb.append(",NO_TIMES_IN_TRACKING_OPERATION=" + NO_TIMES_IN_TRACKING_OPERATION);
			sb.append(",MANUAL_OPERATION_OF_ANODE_BEAM=" + MANUAL_OPERATION_OF_ANODE_BEAM);
			sb.append(",TIME_IN_TRACKING_OPERATION_MIN=" + TIME_IN_TRACKING_OPERATION_MIN);
			sb.append(",ACTUA_LCURRENT=" + ACTUA_LCURRENT);
			sb.append(",OVER_VOLTAGE=" + OVER_VOLTAGE);
			sb.append(",DATE_OF_RECORD1=" + DATE_OF_RECORD1);
			sb.append(",POTLINE1=" + POTLINE1);
			sb.append(",POTID=" + POTID);
			sb.append(",LIF=" + LIF);
			sb.append(",CATHODE_RESISTANCE=" + CATHODE_RESISTANCE);
			sb.append(",VOLTAGE_DROP_RODEBEAM=" + VOLTAGE_DROP_RODEBEAM);
			sb.append(",COLTAGE_DROP_BEAMCARBON=" + COLTAGE_DROP_BEAMCARBON);
			sb.append(",POTLINE2=" + POTLINE2);
			sb.append(",POTID1=" + POTID1);
			sb.append(",DATE_OF_RECORD2=" + DATE_OF_RECORD2);
			sb.append(",NA2O=" + NA2O);
			sb.append(",PAF300=" + PAF300);
			sb.append(",ALPHA_ALUMINA=" + ALPHA_ALUMINA);
			sb.append(",CAO=" + CAO);
			sb.append(",GTC1=" + GTC1);
			sb.append(",GTC2=" + GTC2);
			sb.append(",GTC3=" + GTC3);
			sb.append(",GTC4=" + GTC4);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJava_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				resultsStruct results = new resultsStruct();

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("results" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputXML_1 = 0;

				class BytesLimit65535_tFileOutputXML_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputXML_1().limitLog4jByte();

				String originalFileName_tFileOutputXML_1 = context.FilePath + "OneDay-" + context.FileName + ".xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				String[] headers_tFileOutputXML_1 = new String[2];

				headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\"" + "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_1 = new String[1];

				headers_tFileOutputXML_1[1] = "<" + "root" + ">";

				footers_tFileOutputXML_1[0] = "</" + "root" + ">";

				int nb_line_tFileOutputXML_1 = 0;

				java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_tFileOutputXML_1), "ISO-8859-15"));

				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
				out_tFileOutputXML_1.newLine();

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				tHash_Lookup_row4.initGet();

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				resultsStruct results_tmp = new resultsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				class BytesLimit65535_tOracleInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tOracleInput_1().limitLog4jByte();

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);

				String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@" + "10.100.118.121" + ":" + "1521" + ":" + "PROD";

				String dbUser_tOracleInput_1 = "ge_user";

				final String decryptedPassword_tOracleInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("fe5230ac5a4fbfefc5617b528e86aa11");

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				conn_tOracleInput_1 = java.sql.DriverManager.getConnection(url_tOracleInput_1, dbUser_tOracleInput_1, dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

				String dbquery_tOracleInput_1 = "select  *  from \n(\nselect  case when CJ_BSQ_SER_ID = '0A' then 'A' when CJ_BSQ_SER_ID = '0B'  then 'B' when \n CJ_BSQ_SER_ID = '0C' then 'C' end as Potline, to_char(CJ_BSQ_CUV_ID) PotNo,	to_char(CJ_DATE,\n 'DD-MM-YYYY') Date_of_Record,	to_char(CJ_BSQ_START_DATE,'DD-MM-YYYY') Pot_Start_Date,\n 	to_char(CJ_AGEC) Age_pot_months,	to_char(CJ_ALF3) AlF3_excess,	to_char(CJ_BAJOU) Bath_transferred,\n 	to_char(CJ_CAF2) CaF2_perc,	to_char(CJ_HB) bath_height,	to_char(CJ_HM) metal_height,\n 	to_char(CJ_ICC) Pot_Current,	to_char(CJ_INC1) Anode_Inc1,	to_char(CJ_INC2) Anode_Inc2,\n 	to_char(CJ_INC3) Anode_Inc3,	to_char(CJ_MAJOU) Mass_MetalTransfer,\n 	to_char(CJ_MMCT) Metal_Tapping_KG,	to_char(CJ_NBPRF) Manual_Doses_CrustBath,\n 	to_char(CJ_NBPRFA) Automatic_Doses_CrustBath,	to_char(CJ_NDAL2O3) Alumina_Doses,\n 	to_char(CJ_NDALF3A) AlF3_Doses_Auto,	to_char(CJ_NDALF3M) AlF3_Doses_Man,\n 	to_char(CJ_NSURAL) FastFeed_Doses,	to_char(CJ_NTEA) Anode_Effect_Average,\n 	to_char(CJ_NTV) Valid_Tests,	to_char(CJ_PF) Time_To_Anode_effect_Min,\n 	to_char(CJ_RM) Mean_Resistance,	to_char(CJ_ROSM) Reference_Resistance,	to_char(CJ_TB) Bath_Temp,\n 	to_char(CJ_TFE) Fe,	to_char(CJ_TINS) Instability_Time,	to_char(CJ_TINSL) LongTerm_Instability_Time,\n 	to_char(CJ_TSI) Si,	to_char(CJ_TSOUS) Underfeeding_time,	to_char(CJ_TSUR) Fast_feeding_time,\n 	to_char(CJ_TTAL) Talonaz_Time,	to_char(CJ_TTEA) Anode_Effect_Time,\n 	to_char(CJ_TTHEO) Theo_Feeding_Time,	to_char(CJ_TULTRA) Ultra_feeding_time,\n 	to_char(CJ_TXTCAPOU) hood_open_per24hrs,	to_char(CJ_UCC1) Cath_Voltage_Drop,\n 	to_char(CJ_UISM) Potline_Voltage_Mean,	to_char(CJ_UMM) Pot_Voltage_NoLoss,\n 	to_char(CJ_VTEST) Test_Value,	to_char(CJ_WM) Instability_Noise\n, to_char(CJ_NANO)    ID_Num_Of_Anode_Changed\n, to_char(CJ_UDRC)   Additional_Voltage\n, to_char(CJ_DEFCON) FailedCrust_BreakEvents_Daily\n, to_char(CJ_NSATT)  No_Times_In_Tracking_Operation\n, to_char(CJ_TMAN)   Manual_Operation_Of_Anode_Beam\n, to_char(CJ_TATT)   Time_In_Tracking_Operation_Min\n, to_char(CJ_IMM)    Actua_lCurrent\n, to_char(CJ_SEA)    Over_Voltage\nFROM SYN_CUVE_JOUR   where to_char(cj_date,'DD-MM-YYYY')= to_char(sysdate-1,\n 'DD-MM-YYYY')  order by CJ_BSQ_SER_ID,CJ_BSQ_CUV_ID\n) cj\njoin \n(\nSELECT  to_char(CJ_DATE,'DD-MM-YYYY') Date_of_Record,\n   case when CJ_Serie = 'Α' then 'A' when CJ_Serie = 'Β'  then 'B' when CJ_Serie = 'Γ' then 'C' end \n as PotLine,  to_char(CJ_NOCUVE) PotID, to_char(CJ_LIF) LiF, to_char(CJ_RUC) Cathode_Resistance,\n  to_char(CJ_TIGES_CADRES) Voltage_Drop_RodeBeam, to_char(CJ_CHUTE_ANODIQUE) Coltage_Drop_BeamCarbon\nFROM SYN_T_CUVE_JOUR  where to_char(cj_date,'DD-MM-YYYY')= to_char(sysdate-1,\n 'DD-MM-YYYY')  order by Potline,PotID \n) tcj\non  cj.Potline=tcj.Potline and cj.PotNo=tcj.PotID and cj.Date_of_Record=tcj.Date_of_Record\njoin\n(\nselect t1.Potline,to_char(t1.PotID) PotID,to_char(t1.CJ_DATE,'DD-MM-YYYY') Date_of_Record,\n to_char(t2.NA20) NA2O,to_char(t3.PAF300) PAF300,to_char(Alpha_Alumina) Alpha_Alumina,\n to_char(CAO) CAO,to_char(GTC1) GTC1 ,to_char(GTC2) GTC2,to_char(GTC3) GTC3,to_char(GTC4) GTC4 from \n(SELECT CJ_BSQ_CUV_ID PotID ,\n  case when CJ_BSQ_SER_ID = '0A' then 'A' when CJ_BSQ_SER_ID = '0B'  then 'B' when CJ_BSQ_SER_ID = \n '0C' then 'C' end as Potline, CJ_DATE\nFROM SYN_CUVE_JOUR where to_char(CJ_DATE,'DD-MM-YYYY')= to_char(sysdate-1,'DD-MM-YYYY') ) t1 \nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT NA20 from SYN_V_LABO_ALU_1 where EL_DESCR='Na2O Tot' ) t2\non t1.CJ_DATE=t2.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT PAF300 from SYN_V_LABO_ALU_1 where EL_DESCR='PaF300-1000' ) t3\non t2.CJ_DATE=t3.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT CAO from SYN_V_LABO_ALU_1 where EL_DESCR='CaO' ) t4\non t3.CJ_DATE=t4.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT Alpha_Alumina from SYN_V_LABO_ALU_1 where EL_DESCR='Taux-A' ) t5\non t4.CJ_DATE=t5.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT GTC1 from SYN_V_LABO_ALU_1 where EL_DESCR='F (1)' ) t6\non t5.CJ_DATE=t6.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT GTC2 from SYN_V_LABO_ALU_1 where EL_DESCR='F (2)' ) t7\non t6.CJ_DATE=t7.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT GTC3 from SYN_V_LABO_ALU_1 where EL_DESCR='F (3)') t8\non t7.CJ_DATE=t8.cj_date\nleft join (select MET_DATEEMF cj_date,\n  MD_RESULT GTC4 from SYN_V_LABO_ALU_1 where EL_DESCR='F (4)' ) t9\non t8.CJ_DATE=t9.cj_date \n)tb\non  cj.Potline=tb.Potline and cj.PotNo=tb.PotID and cj.Date_of_Record=tb.Date_of_Record";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = null;
				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row1.POTLINE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(1);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTLINE = tmpContent_tOracleInput_1;
							} else {
								row1.POTLINE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row1.POTNO = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(2);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTNO = tmpContent_tOracleInput_1;
							} else {
								row1.POTNO = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 3) {
							row1.DATE_OF_RECORD = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(3);
							if (tmpContent_tOracleInput_1 != null) {
								row1.DATE_OF_RECORD = tmpContent_tOracleInput_1;
							} else {
								row1.DATE_OF_RECORD = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 4) {
							row1.POT_START_DATE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(4);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POT_START_DATE = tmpContent_tOracleInput_1;
							} else {
								row1.POT_START_DATE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 5) {
							row1.AGE_POT_MONTHS = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(5);
							if (tmpContent_tOracleInput_1 != null) {
								row1.AGE_POT_MONTHS = tmpContent_tOracleInput_1;
							} else {
								row1.AGE_POT_MONTHS = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 6) {
							row1.ALF3_EXCESS = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(6);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ALF3_EXCESS = tmpContent_tOracleInput_1;
							} else {
								row1.ALF3_EXCESS = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 7) {
							row1.BATH_TRANSFERRED = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(7);
							if (tmpContent_tOracleInput_1 != null) {
								row1.BATH_TRANSFERRED = tmpContent_tOracleInput_1;
							} else {
								row1.BATH_TRANSFERRED = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 8) {
							row1.CAF2_PERC = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(8);
							if (tmpContent_tOracleInput_1 != null) {
								row1.CAF2_PERC = tmpContent_tOracleInput_1;
							} else {
								row1.CAF2_PERC = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 9) {
							row1.BATH_HEIGHT = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(9);
							if (tmpContent_tOracleInput_1 != null) {
								row1.BATH_HEIGHT = tmpContent_tOracleInput_1;
							} else {
								row1.BATH_HEIGHT = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 10) {
							row1.METAL_HEIGHT = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(10);
							if (tmpContent_tOracleInput_1 != null) {
								row1.METAL_HEIGHT = tmpContent_tOracleInput_1;
							} else {
								row1.METAL_HEIGHT = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 11) {
							row1.POT_CURRENT = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(11);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POT_CURRENT = tmpContent_tOracleInput_1;
							} else {
								row1.POT_CURRENT = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 12) {
							row1.ANODE_INC1 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(12);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ANODE_INC1 = tmpContent_tOracleInput_1;
							} else {
								row1.ANODE_INC1 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 13) {
							row1.ANODE_INC2 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(13);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ANODE_INC2 = tmpContent_tOracleInput_1;
							} else {
								row1.ANODE_INC2 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 14) {
							row1.ANODE_INC3 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(14);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ANODE_INC3 = tmpContent_tOracleInput_1;
							} else {
								row1.ANODE_INC3 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 15) {
							row1.MASS_METALTRANSFER = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(15);
							if (tmpContent_tOracleInput_1 != null) {
								row1.MASS_METALTRANSFER = tmpContent_tOracleInput_1;
							} else {
								row1.MASS_METALTRANSFER = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 16) {
							row1.METAL_TAPPING_KG = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(16);
							if (tmpContent_tOracleInput_1 != null) {
								row1.METAL_TAPPING_KG = tmpContent_tOracleInput_1;
							} else {
								row1.METAL_TAPPING_KG = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 17) {
							row1.MANUAL_DOSES_CRUSTBATH = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(17);
							if (tmpContent_tOracleInput_1 != null) {
								row1.MANUAL_DOSES_CRUSTBATH = tmpContent_tOracleInput_1;
							} else {
								row1.MANUAL_DOSES_CRUSTBATH = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 18) {
							row1.AUTOMATIC_DOSES_CRUSTBATH = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(18);
							if (tmpContent_tOracleInput_1 != null) {
								row1.AUTOMATIC_DOSES_CRUSTBATH = tmpContent_tOracleInput_1;
							} else {
								row1.AUTOMATIC_DOSES_CRUSTBATH = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 19) {
							row1.ALUMINA_DOSES = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(19);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ALUMINA_DOSES = tmpContent_tOracleInput_1;
							} else {
								row1.ALUMINA_DOSES = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 20) {
							row1.ALF3_DOSES_AUTO = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(20);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ALF3_DOSES_AUTO = tmpContent_tOracleInput_1;
							} else {
								row1.ALF3_DOSES_AUTO = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 21) {
							row1.ALF3_DOSES_MAN = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(21);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ALF3_DOSES_MAN = tmpContent_tOracleInput_1;
							} else {
								row1.ALF3_DOSES_MAN = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 22) {
							row1.FASTFEED_DOSES = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(22);
							if (tmpContent_tOracleInput_1 != null) {
								row1.FASTFEED_DOSES = tmpContent_tOracleInput_1;
							} else {
								row1.FASTFEED_DOSES = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 23) {
							row1.ANODE_EFFECT_AVERAGE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(23);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ANODE_EFFECT_AVERAGE = tmpContent_tOracleInput_1;
							} else {
								row1.ANODE_EFFECT_AVERAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 24) {
							row1.VALID_TESTS = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(24);
							if (tmpContent_tOracleInput_1 != null) {
								row1.VALID_TESTS = tmpContent_tOracleInput_1;
							} else {
								row1.VALID_TESTS = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 25) {
							row1.TIME_TO_ANODE_EFFECT_MIN = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(25);
							if (tmpContent_tOracleInput_1 != null) {
								row1.TIME_TO_ANODE_EFFECT_MIN = tmpContent_tOracleInput_1;
							} else {
								row1.TIME_TO_ANODE_EFFECT_MIN = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 26) {
							row1.MEAN_RESISTANCE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(26);
							if (tmpContent_tOracleInput_1 != null) {
								row1.MEAN_RESISTANCE = tmpContent_tOracleInput_1;
							} else {
								row1.MEAN_RESISTANCE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 27) {
							row1.REFERENCE_RESISTANCE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(27);
							if (tmpContent_tOracleInput_1 != null) {
								row1.REFERENCE_RESISTANCE = tmpContent_tOracleInput_1;
							} else {
								row1.REFERENCE_RESISTANCE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 28) {
							row1.BATH_TEMP = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(28);
							if (tmpContent_tOracleInput_1 != null) {
								row1.BATH_TEMP = tmpContent_tOracleInput_1;
							} else {
								row1.BATH_TEMP = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 29) {
							row1.FE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(29);
							if (tmpContent_tOracleInput_1 != null) {
								row1.FE = tmpContent_tOracleInput_1;
							} else {
								row1.FE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 30) {
							row1.INSTABILITY_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(30);
							if (tmpContent_tOracleInput_1 != null) {
								row1.INSTABILITY_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.INSTABILITY_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 31) {
							row1.LONGTERM_INSTABILITY_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(31);
							if (tmpContent_tOracleInput_1 != null) {
								row1.LONGTERM_INSTABILITY_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.LONGTERM_INSTABILITY_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 32) {
							row1.SI = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(32);
							if (tmpContent_tOracleInput_1 != null) {
								row1.SI = tmpContent_tOracleInput_1;
							} else {
								row1.SI = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 33) {
							row1.UNDERFEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(33);
							if (tmpContent_tOracleInput_1 != null) {
								row1.UNDERFEEDING_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.UNDERFEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 34) {
							row1.FAST_FEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(34);
							if (tmpContent_tOracleInput_1 != null) {
								row1.FAST_FEEDING_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.FAST_FEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 35) {
							row1.TALONAZ_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(35);
							if (tmpContent_tOracleInput_1 != null) {
								row1.TALONAZ_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.TALONAZ_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 36) {
							row1.ANODE_EFFECT_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(36);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ANODE_EFFECT_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.ANODE_EFFECT_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 37) {
							row1.THEO_FEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(37);
							if (tmpContent_tOracleInput_1 != null) {
								row1.THEO_FEEDING_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.THEO_FEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 38) {
							row1.ULTRA_FEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(38);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ULTRA_FEEDING_TIME = tmpContent_tOracleInput_1;
							} else {
								row1.ULTRA_FEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 39) {
							row1.HOOD_OPEN_PER24HRS = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(39);
							if (tmpContent_tOracleInput_1 != null) {
								row1.HOOD_OPEN_PER24HRS = tmpContent_tOracleInput_1;
							} else {
								row1.HOOD_OPEN_PER24HRS = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 40) {
							row1.CATH_VOLTAGE_DROP = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(40);
							if (tmpContent_tOracleInput_1 != null) {
								row1.CATH_VOLTAGE_DROP = tmpContent_tOracleInput_1;
							} else {
								row1.CATH_VOLTAGE_DROP = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 41) {
							row1.POTLINE_VOLTAGE_MEAN = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(41);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTLINE_VOLTAGE_MEAN = tmpContent_tOracleInput_1;
							} else {
								row1.POTLINE_VOLTAGE_MEAN = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 42) {
							row1.POT_VOLTAGE_NOLOSS = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(42);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POT_VOLTAGE_NOLOSS = tmpContent_tOracleInput_1;
							} else {
								row1.POT_VOLTAGE_NOLOSS = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 43) {
							row1.TEST_VALUE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(43);
							if (tmpContent_tOracleInput_1 != null) {
								row1.TEST_VALUE = tmpContent_tOracleInput_1;
							} else {
								row1.TEST_VALUE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 44) {
							row1.INSTABILITY_NOISE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(44);
							if (tmpContent_tOracleInput_1 != null) {
								row1.INSTABILITY_NOISE = tmpContent_tOracleInput_1;
							} else {
								row1.INSTABILITY_NOISE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 45) {
							row1.ID_NUM_OF_ANODE_CHANGED = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(45);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ID_NUM_OF_ANODE_CHANGED = tmpContent_tOracleInput_1;
							} else {
								row1.ID_NUM_OF_ANODE_CHANGED = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 46) {
							row1.ADDITIONAL_VOLTAGE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(46);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ADDITIONAL_VOLTAGE = tmpContent_tOracleInput_1;
							} else {
								row1.ADDITIONAL_VOLTAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 47) {
							row1.FAILEDCRUST_BREAKEVENTS_DAILY = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(47);
							if (tmpContent_tOracleInput_1 != null) {
								row1.FAILEDCRUST_BREAKEVENTS_DAILY = tmpContent_tOracleInput_1;
							} else {
								row1.FAILEDCRUST_BREAKEVENTS_DAILY = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 48) {
							row1.NO_TIMES_IN_TRACKING_OPERATION = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(48);
							if (tmpContent_tOracleInput_1 != null) {
								row1.NO_TIMES_IN_TRACKING_OPERATION = tmpContent_tOracleInput_1;
							} else {
								row1.NO_TIMES_IN_TRACKING_OPERATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 49) {
							row1.MANUAL_OPERATION_OF_ANODE_BEAM = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(49);
							if (tmpContent_tOracleInput_1 != null) {
								row1.MANUAL_OPERATION_OF_ANODE_BEAM = tmpContent_tOracleInput_1;
							} else {
								row1.MANUAL_OPERATION_OF_ANODE_BEAM = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 50) {
							row1.TIME_IN_TRACKING_OPERATION_MIN = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(50);
							if (tmpContent_tOracleInput_1 != null) {
								row1.TIME_IN_TRACKING_OPERATION_MIN = tmpContent_tOracleInput_1;
							} else {
								row1.TIME_IN_TRACKING_OPERATION_MIN = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 51) {
							row1.ACTUA_LCURRENT = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(51);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ACTUA_LCURRENT = tmpContent_tOracleInput_1;
							} else {
								row1.ACTUA_LCURRENT = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 52) {
							row1.OVER_VOLTAGE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(52);
							if (tmpContent_tOracleInput_1 != null) {
								row1.OVER_VOLTAGE = tmpContent_tOracleInput_1;
							} else {
								row1.OVER_VOLTAGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 53) {
							row1.DATE_OF_RECORD1 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(53);
							if (tmpContent_tOracleInput_1 != null) {
								row1.DATE_OF_RECORD1 = tmpContent_tOracleInput_1;
							} else {
								row1.DATE_OF_RECORD1 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 54) {
							row1.POTLINE1 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(54);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTLINE1 = tmpContent_tOracleInput_1;
							} else {
								row1.POTLINE1 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 55) {
							row1.POTID = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(55);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTID = tmpContent_tOracleInput_1;
							} else {
								row1.POTID = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 56) {
							row1.LIF = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(56);
							if (tmpContent_tOracleInput_1 != null) {
								row1.LIF = tmpContent_tOracleInput_1;
							} else {
								row1.LIF = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 57) {
							row1.CATHODE_RESISTANCE = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(57);
							if (tmpContent_tOracleInput_1 != null) {
								row1.CATHODE_RESISTANCE = tmpContent_tOracleInput_1;
							} else {
								row1.CATHODE_RESISTANCE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 58) {
							row1.VOLTAGE_DROP_RODEBEAM = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(58);
							if (tmpContent_tOracleInput_1 != null) {
								row1.VOLTAGE_DROP_RODEBEAM = tmpContent_tOracleInput_1;
							} else {
								row1.VOLTAGE_DROP_RODEBEAM = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 59) {
							row1.COLTAGE_DROP_BEAMCARBON = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(59);
							if (tmpContent_tOracleInput_1 != null) {
								row1.COLTAGE_DROP_BEAMCARBON = tmpContent_tOracleInput_1;
							} else {
								row1.COLTAGE_DROP_BEAMCARBON = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 60) {
							row1.POTLINE2 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(60);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTLINE2 = tmpContent_tOracleInput_1;
							} else {
								row1.POTLINE2 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 61) {
							row1.POTID1 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(61);
							if (tmpContent_tOracleInput_1 != null) {
								row1.POTID1 = tmpContent_tOracleInput_1;
							} else {
								row1.POTID1 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 62) {
							row1.DATE_OF_RECORD2 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(62);
							if (tmpContent_tOracleInput_1 != null) {
								row1.DATE_OF_RECORD2 = tmpContent_tOracleInput_1;
							} else {
								row1.DATE_OF_RECORD2 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 63) {
							row1.NA2O = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(63);
							if (tmpContent_tOracleInput_1 != null) {
								row1.NA2O = tmpContent_tOracleInput_1;
							} else {
								row1.NA2O = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 64) {
							row1.PAF300 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(64);
							if (tmpContent_tOracleInput_1 != null) {
								row1.PAF300 = tmpContent_tOracleInput_1;
							} else {
								row1.PAF300 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 65) {
							row1.ALPHA_ALUMINA = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(65);
							if (tmpContent_tOracleInput_1 != null) {
								row1.ALPHA_ALUMINA = tmpContent_tOracleInput_1;
							} else {
								row1.ALPHA_ALUMINA = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 66) {
							row1.CAO = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(66);
							if (tmpContent_tOracleInput_1 != null) {
								row1.CAO = tmpContent_tOracleInput_1;
							} else {
								row1.CAO = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 67) {
							row1.GTC1 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(67);
							if (tmpContent_tOracleInput_1 != null) {
								row1.GTC1 = tmpContent_tOracleInput_1;
							} else {
								row1.GTC1 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 68) {
							row1.GTC2 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(68);
							if (tmpContent_tOracleInput_1 != null) {
								row1.GTC2 = tmpContent_tOracleInput_1;
							} else {
								row1.GTC2 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 69) {
							row1.GTC3 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(69);
							if (tmpContent_tOracleInput_1 != null) {
								row1.GTC3 = tmpContent_tOracleInput_1;
							} else {
								row1.GTC3 = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 70) {
							row1.GTC4 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1.getString(70);
							if (tmpContent_tOracleInput_1 != null) {
								row1.GTC4 = tmpContent_tOracleInput_1;
							} else {
								row1.GTC4 = null;
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							tHash_Lookup_row4.lookup(row4HashKey);

							if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

								forceLooprow4 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow4 = true;
						} // G 21

						row4Struct row4 = null;

						while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

							// CALL close loop of lookup 'row4'

							row4Struct fromLookup_row4 = null;
							row4 = row4Default;

							if (!forceLooprow4) { // G 46

								fromLookup_row4 = tHash_Lookup_row4.next();

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

							} // G 46

							forceLooprow4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								results = null;

								// # Output table : 'results'
								results_tmp.Potline = row1.POTLINE;
								results_tmp.PotNo = row1.POTNO;
								results_tmp.Date_of_Record = row1.DATE_OF_RECORD;
								results_tmp.Pot_Start_Date = row1.POT_START_DATE;
								results_tmp.Age_pot_months = row1.AGE_POT_MONTHS;
								results_tmp.AlF3_excess = row1.ALF3_EXCESS;
								results_tmp.Bath_transferred = row1.BATH_TRANSFERRED;
								results_tmp.CaF2_perc = row1.CAF2_PERC;
								results_tmp.bath_height = row1.BATH_HEIGHT;
								results_tmp.metal_height = row1.METAL_HEIGHT;
								results_tmp.Pot_Current = row1.POT_CURRENT;
								results_tmp.Anode_Inc1 = row1.ANODE_INC1;
								results_tmp.Anode_Inc2 = row1.ANODE_INC2;
								results_tmp.Anode_Inc3 = row1.ANODE_INC3;
								results_tmp.Mass_MetalTransfer = row1.MASS_METALTRANSFER;
								results_tmp.Metal_Tapping_KG = row1.METAL_TAPPING_KG;
								results_tmp.Manual_Doses_CrustBath = row1.MANUAL_DOSES_CRUSTBATH;
								results_tmp.Automatic_Doses_CrustBath = row1.AUTOMATIC_DOSES_CRUSTBATH;
								results_tmp.Alumina_Doses = row1.ALUMINA_DOSES;
								results_tmp.AlF3_Doses_Auto = row1.ALF3_DOSES_AUTO;
								results_tmp.AlF3_Doses_Man = row1.ALF3_DOSES_MAN;
								results_tmp.FastFeed_Doses = row1.FASTFEED_DOSES;
								results_tmp.Anode_Effect_Average = row1.ANODE_EFFECT_AVERAGE;
								results_tmp.Valid_Tests = row1.VALID_TESTS;
								results_tmp.Time_To_Anode_effect_Min = row1.TIME_TO_ANODE_EFFECT_MIN;
								results_tmp.Mean_Resistance = row1.MEAN_RESISTANCE;
								results_tmp.Reference_Resistance = row1.REFERENCE_RESISTANCE;
								results_tmp.Bath_Temp = row1.BATH_TEMP;
								results_tmp.Fe = row1.FE;
								results_tmp.Instability_Time = row1.INSTABILITY_TIME;
								results_tmp.LongTerm_Instability_Time = row1.LONGTERM_INSTABILITY_TIME;
								results_tmp.Si = row1.SI;
								results_tmp.Underfeeding_time = row1.UNDERFEEDING_TIME;
								results_tmp.Fast_feeding_time = row1.FAST_FEEDING_TIME;
								results_tmp.Talonaz_Time = row1.TALONAZ_TIME;
								results_tmp.Anode_Effect_Time = row1.ANODE_EFFECT_TIME;
								results_tmp.Theo_Feeding_Time = row1.THEO_FEEDING_TIME;
								results_tmp.Ultra_feeding_time = row1.ULTRA_FEEDING_TIME;
								results_tmp.hood_open_per24hrs = row1.HOOD_OPEN_PER24HRS;
								results_tmp.Cath_Voltage_Drop = row1.CATH_VOLTAGE_DROP;
								results_tmp.Potline_Voltage_Mean = row1.POTLINE_VOLTAGE_MEAN;
								results_tmp.Pot_Voltage_NoLoss = row1.POT_VOLTAGE_NOLOSS;
								results_tmp.Test_Value = row1.TEST_VALUE;
								results_tmp.Instability_Noise = row1.INSTABILITY_NOISE;
								results_tmp.LiF = row1.LIF;
								results_tmp.Cathode_Resistance = row1.CATHODE_RESISTANCE;
								results_tmp.Voltage_Drop_RodeBeam = row1.VOLTAGE_DROP_RODEBEAM;
								results_tmp.Coltage_Drop_BeamCarbon = row1.COLTAGE_DROP_BEAMCARBON;
								results_tmp.NA2O = row1.NA2O;
								results_tmp.PAF300 = row1.PAF300;
								results_tmp.Alpha_Alumina = row1.ALPHA_ALUMINA;
								results_tmp.CAO = row1.CAO;
								results_tmp.GTC1 = row1.GTC1;
								results_tmp.GTC2 = row1.GTC2;
								results_tmp.GTC3 = row1.GTC3;
								results_tmp.GTC4 = row1.GTC4;
								results_tmp.ID_Num_Of_Anode_Changed = row1.ID_NUM_OF_ANODE_CHANGED;
								results_tmp.Additional_Voltage = row1.ADDITIONAL_VOLTAGE;
								results_tmp.Num_Of_FailedCrust_BreakEvents_Daily = row1.FAILEDCRUST_BREAKEVENTS_DAILY;
								results_tmp.Num_Of_Times_In_Tracking_Operation = row1.NO_TIMES_IN_TRACKING_OPERATION;
								results_tmp.Time_In_Manual_Operation_Of_Anode_Beam = row1.MANUAL_OPERATION_OF_ANODE_BEAM;
								results_tmp.Time_In_Tracking_Operation_Min = row1.TIME_IN_TRACKING_OPERATION_MIN;
								results_tmp.Actual_Current = row1.ACTUA_LCURRENT;
								results_tmp.Over_Voltage = row1.OVER_VOLTAGE;
								results = results_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "results"
							if (results != null) {

								/**
								 * [tFileOutputXML_1 main ] start
								 */

								currentComponent = "tFileOutputXML_1";

								// results
								// results

								if (execStat) {
									runStat.updateStatOnConnection("results" + iterateId, 1, 1);
								}

								StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<" + "Pot");
								tempRes_tFileOutputXML_1.append(">");
								out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Potline" + ">" + ((results.Potline == null) ? "" : (TalendString.checkCDATAForXML(results.Potline))) + "</" + "Potline" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "PotNo" + ">" + ((results.PotNo == null) ? "" : (TalendString.checkCDATAForXML(results.PotNo))) + "</" + "PotNo" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Date_of_Record" + ">" + ((results.Date_of_Record == null) ? "" : (TalendString.checkCDATAForXML(results.Date_of_Record))) + "</"
										+ "Date_of_Record" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Pot_Start_Date" + ">" + ((results.Pot_Start_Date == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Start_Date))) + "</"
										+ "Pot_Start_Date" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Age_pot_months" + ">" + ((results.Age_pot_months == null) ? "" : (TalendString.checkCDATAForXML(results.Age_pot_months))) + "</"
										+ "Age_pot_months" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "AlF3_excess" + ">" + ((results.AlF3_excess == null) ? "" : (TalendString.checkCDATAForXML(results.AlF3_excess))) + "</" + "AlF3_excess" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Bath_transferred" + ">" + ((results.Bath_transferred == null) ? "" : (TalendString.checkCDATAForXML(results.Bath_transferred))) + "</"
										+ "Bath_transferred" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "CaF2_perc" + ">" + ((results.CaF2_perc == null) ? "" : (TalendString.checkCDATAForXML(results.CaF2_perc))) + "</" + "CaF2_perc" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "bath_height" + ">" + ((results.bath_height == null) ? "" : (TalendString.checkCDATAForXML(results.bath_height))) + "</" + "bath_height" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "metal_height" + ">" + ((results.metal_height == null) ? "" : (TalendString.checkCDATAForXML(results.metal_height))) + "</" + "metal_height" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Pot_Current" + ">" + ((results.Pot_Current == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Current))) + "</" + "Pot_Current" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Anode_Inc1" + ">" + ((results.Anode_Inc1 == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Inc1))) + "</" + "Anode_Inc1" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Anode_Inc2" + ">" + ((results.Anode_Inc2 == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Inc2))) + "</" + "Anode_Inc2" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Anode_Inc3" + ">" + ((results.Anode_Inc3 == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Inc3))) + "</" + "Anode_Inc3" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Mass_MetalTransfer" + ">" + ((results.Mass_MetalTransfer == null) ? "" : (TalendString.checkCDATAForXML(results.Mass_MetalTransfer)))
										+ "</" + "Mass_MetalTransfer" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Metal_Tapping_KG" + ">" + ((results.Metal_Tapping_KG == null) ? "" : (TalendString.checkCDATAForXML(results.Metal_Tapping_KG))) + "</"
										+ "Metal_Tapping_KG" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Manual_Doses_CrustBath" + ">"
										+ ((results.Manual_Doses_CrustBath == null) ? "" : (TalendString.checkCDATAForXML(results.Manual_Doses_CrustBath))) + "</" + "Manual_Doses_CrustBath" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Automatic_Doses_CrustBath" + ">"
										+ ((results.Automatic_Doses_CrustBath == null) ? "" : (TalendString.checkCDATAForXML(results.Automatic_Doses_CrustBath))) + "</" + "Automatic_Doses_CrustBath"
										+ ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Alumina_Doses" + ">" + ((results.Alumina_Doses == null) ? "" : (TalendString.checkCDATAForXML(results.Alumina_Doses))) + "</" + "Alumina_Doses" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "AlF3_Doses_Auto" + ">" + ((results.AlF3_Doses_Auto == null) ? "" : (TalendString.checkCDATAForXML(results.AlF3_Doses_Auto))) + "</"
										+ "AlF3_Doses_Auto" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "AlF3_Doses_Man" + ">" + ((results.AlF3_Doses_Man == null) ? "" : (TalendString.checkCDATAForXML(results.AlF3_Doses_Man))) + "</"
										+ "AlF3_Doses_Man" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "FastFeed_Doses" + ">" + ((results.FastFeed_Doses == null) ? "" : (TalendString.checkCDATAForXML(results.FastFeed_Doses))) + "</"
										+ "FastFeed_Doses" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Anode_Effect_Average" + ">"
										+ ((results.Anode_Effect_Average == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Effect_Average))) + "</" + "Anode_Effect_Average" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Valid_Tests" + ">" + ((results.Valid_Tests == null) ? "" : (TalendString.checkCDATAForXML(results.Valid_Tests))) + "</" + "Valid_Tests" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Time_To_Anode_effect_Min" + ">" + ((results.Time_To_Anode_effect_Min == null) ? "" : (TalendString.checkCDATAForXML(results.Time_To_Anode_effect_Min)))
												+ "</" + "Time_To_Anode_effect_Min" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Mean_Resistance" + ">" + ((results.Mean_Resistance == null) ? "" : (TalendString.checkCDATAForXML(results.Mean_Resistance))) + "</"
										+ "Mean_Resistance" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Reference_Resistance" + ">"
										+ ((results.Reference_Resistance == null) ? "" : (TalendString.checkCDATAForXML(results.Reference_Resistance))) + "</" + "Reference_Resistance" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Bath_Temp" + ">" + ((results.Bath_Temp == null) ? "" : (TalendString.checkCDATAForXML(results.Bath_Temp))) + "</" + "Bath_Temp" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Fe" + ">" + ((results.Fe == null) ? "" : (TalendString.checkCDATAForXML(results.Fe))) + "</" + "Fe" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Instability_Time" + ">" + ((results.Instability_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Instability_Time))) + "</"
										+ "Instability_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "LongTerm_Instability_Time" + ">"
										+ ((results.LongTerm_Instability_Time == null) ? "" : (TalendString.checkCDATAForXML(results.LongTerm_Instability_Time))) + "</" + "LongTerm_Instability_Time"
										+ ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Si" + ">" + ((results.Si == null) ? "" : (TalendString.checkCDATAForXML(results.Si))) + "</" + "Si" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Underfeeding_time" + ">" + ((results.Underfeeding_time == null) ? "" : (TalendString.checkCDATAForXML(results.Underfeeding_time)))
										+ "</" + "Underfeeding_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Fast_feeding_time" + ">" + ((results.Fast_feeding_time == null) ? "" : (TalendString.checkCDATAForXML(results.Fast_feeding_time)))
										+ "</" + "Fast_feeding_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Talonaz_Time" + ">" + ((results.Talonaz_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Talonaz_Time))) + "</" + "Talonaz_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Anode_Effect_Time" + ">" + ((results.Anode_Effect_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Effect_Time)))
										+ "</" + "Anode_Effect_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Theo_Feeding_Time" + ">" + ((results.Theo_Feeding_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Theo_Feeding_Time)))
										+ "</" + "Theo_Feeding_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Ultra_feeding_time" + ">" + ((results.Ultra_feeding_time == null) ? "" : (TalendString.checkCDATAForXML(results.Ultra_feeding_time)))
										+ "</" + "Ultra_feeding_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "hood_open_per24hrs" + ">" + ((results.hood_open_per24hrs == null) ? "" : (TalendString.checkCDATAForXML(results.hood_open_per24hrs)))
										+ "</" + "hood_open_per24hrs" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Cath_Voltage_Drop" + ">" + ((results.Cath_Voltage_Drop == null) ? "" : (TalendString.checkCDATAForXML(results.Cath_Voltage_Drop)))
										+ "</" + "Cath_Voltage_Drop" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Potline_Voltage_Mean" + ">"
										+ ((results.Potline_Voltage_Mean == null) ? "" : (TalendString.checkCDATAForXML(results.Potline_Voltage_Mean))) + "</" + "Potline_Voltage_Mean" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Pot_Voltage_NoLoss" + ">" + ((results.Pot_Voltage_NoLoss == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Voltage_NoLoss)))
										+ "</" + "Pot_Voltage_NoLoss" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Test_Value" + ">" + ((results.Test_Value == null) ? "" : (TalendString.checkCDATAForXML(results.Test_Value))) + "</" + "Test_Value" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Instability_Noise" + ">" + ((results.Instability_Noise == null) ? "" : (TalendString.checkCDATAForXML(results.Instability_Noise)))
										+ "</" + "Instability_Noise" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "LiF" + ">" + ((results.LiF == null) ? "" : (TalendString.checkCDATAForXML(results.LiF))) + "</" + "LiF" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Cathode_Resistance" + ">" + ((results.Cathode_Resistance == null) ? "" : (TalendString.checkCDATAForXML(results.Cathode_Resistance)))
										+ "</" + "Cathode_Resistance" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Voltage_Drop_RodeBeam" + ">"
										+ ((results.Voltage_Drop_RodeBeam == null) ? "" : (TalendString.checkCDATAForXML(results.Voltage_Drop_RodeBeam))) + "</" + "Voltage_Drop_RodeBeam" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Coltage_Drop_BeamCarbon" + ">"
										+ ((results.Coltage_Drop_BeamCarbon == null) ? "" : (TalendString.checkCDATAForXML(results.Coltage_Drop_BeamCarbon))) + "</" + "Coltage_Drop_BeamCarbon" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "NA2O" + ">" + ((results.NA2O == null) ? "" : (TalendString.checkCDATAForXML(results.NA2O))) + "</" + "NA2O" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "PAF300" + ">" + ((results.PAF300 == null) ? "" : (TalendString.checkCDATAForXML(results.PAF300))) + "</" + "PAF300" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Alpha_Alumina" + ">" + ((results.Alpha_Alumina == null) ? "" : (TalendString.checkCDATAForXML(results.Alpha_Alumina))) + "</" + "Alpha_Alumina" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "CAO" + ">" + ((results.CAO == null) ? "" : (TalendString.checkCDATAForXML(results.CAO))) + "</" + "CAO" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "GTC1" + ">" + ((results.GTC1 == null) ? "" : (TalendString.checkCDATAForXML(results.GTC1))) + "</" + "GTC1" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "GTC2" + ">" + ((results.GTC2 == null) ? "" : (TalendString.checkCDATAForXML(results.GTC2))) + "</" + "GTC2" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "GTC3" + ">" + ((results.GTC3 == null) ? "" : (TalendString.checkCDATAForXML(results.GTC3))) + "</" + "GTC3" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "GTC4" + ">" + ((results.GTC4 == null) ? "" : (TalendString.checkCDATAForXML(results.GTC4))) + "</" + "GTC4" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "ID_Num_Of_Anode_Changed" + ">"
										+ ((results.ID_Num_Of_Anode_Changed == null) ? "" : (TalendString.checkCDATAForXML(results.ID_Num_Of_Anode_Changed))) + "</" + "ID_Num_Of_Anode_Changed" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Additional_Voltage" + ">" + ((results.Additional_Voltage == null) ? "" : (TalendString.checkCDATAForXML(results.Additional_Voltage)))
										+ "</" + "Additional_Voltage" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Num_Of_FailedCrust_BreakEvents_Daily" + ">"
										+ ((results.Num_Of_FailedCrust_BreakEvents_Daily == null) ? "" : (TalendString.checkCDATAForXML(results.Num_Of_FailedCrust_BreakEvents_Daily))) + "</"
										+ "Num_Of_FailedCrust_BreakEvents_Daily" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Num_Of_Times_In_Tracking_Operation" + ">"
										+ ((results.Num_Of_Times_In_Tracking_Operation == null) ? "" : (TalendString.checkCDATAForXML(results.Num_Of_Times_In_Tracking_Operation))) + "</"
										+ "Num_Of_Times_In_Tracking_Operation" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Time_In_Manual_Operation_Of_Anode_Beam" + ">"
										+ ((results.Time_In_Manual_Operation_Of_Anode_Beam == null) ? "" : (TalendString.checkCDATAForXML(results.Time_In_Manual_Operation_Of_Anode_Beam))) + "</"
										+ "Time_In_Manual_Operation_Of_Anode_Beam" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Time_In_Tracking_Operation_Min" + ">"
										+ ((results.Time_In_Tracking_Operation_Min == null) ? "" : (TalendString.checkCDATAForXML(results.Time_In_Tracking_Operation_Min))) + "</"
										+ "Time_In_Tracking_Operation_Min" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Actual_Current" + ">" + ((results.Actual_Current == null) ? "" : (TalendString.checkCDATAForXML(results.Actual_Current))) + "</"
										+ "Actual_Current" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Over_Voltage" + ">" + ((results.Over_Voltage == null) ? "" : (TalendString.checkCDATAForXML(results.Over_Voltage))) + "</" + "Over_Voltage" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("</" + "Pot" + ">");

								out_tFileOutputXML_1.newLine();

								nb_line_tFileOutputXML_1++;

								tos_count_tFileOutputXML_1++;

								/**
								 * [tFileOutputXML_1 main ] stop
								 */

							} // End of branch "results"

						} // close loop of lookup 'row4' // G_TM_M_043

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					stmt_tOracleInput_1.close();

					if (conn_tOracleInput_1 != null && !conn_tOracleInput_1.isClosed()) {

						conn_tOracleInput_1.close();

					}

				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.close();
				globalMap.put("tFileOutputXML_1_NB_LINE", nb_line_tFileOutputXML_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("results" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML24HR = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML24HR) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tJava_1 - inputs:(after_tOracleInput_1)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row4) outputs:(results)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				class BytesLimit65535_tJava_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_1().limitLog4jByte();

				context.FileName = TalendDate.getDate("yyyyMMdd_hhmmss");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tAdvancedHash_row4 main ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				// row4
				// row4

				if (execStat) {
					runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
				}

				row4Struct row4_HashRow = new row4Struct();

				tHash_Lookup_row4.put(row4_HashRow);

				tos_count_tAdvancedHash_row4++;

				/**
				 * [tAdvancedHash_row4 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ETLXML24HR ETLXML24HRClass = new ETLXML24HR();

		int exitCode = ETLXML24HRClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ETLXML24HR.class.getClassLoader().getResourceAsStream(contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context " + contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.FileName = (String) context.getProperty("FileName");
			context.FilePath = (String) context.getProperty("FilePath");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("FileName")) {
				context.FileName = (String) parentContextMap.get("FileName");
			}
			if (parentContextMap.containsKey("FilePath")) {
				context.FilePath = (String) parentContextMap.get("FilePath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_1) {
			globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

			e_tOracleInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETLXML24HR");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "", "" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 164642 characters generated by Talend Open Studio for Data Integration on the
 * October 17, 2017 7:54:45 AM EEST
 ************************************************************************************************/