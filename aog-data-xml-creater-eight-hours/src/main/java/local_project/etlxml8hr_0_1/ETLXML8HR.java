// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.etlxml8hr_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: ETLXML8HR Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status
 */
public class ETLXML8HR implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (FileName != null) {

				this.setProperty("FileName", FileName.toString());

			}

			if (FilePath != null) {

				this.setProperty("FilePath", FilePath.toString());

			}

		}

		public String FileName;

		public String getFileName() {
			return this.FileName;
		}

		public String FilePath;

		public String getFilePath() {
			return this.FilePath;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ETLXML8HR";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ETLXML8HR.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ETLXML8HR.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class resultsStruct implements routines.system.IPersistableRow<resultsStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[0];

		public String Potline;

		public String getPotline() {
			return this.Potline;
		}

		public String PotNo;

		public String getPotNo() {
			return this.PotNo;
		}

		public String Date_of_Record;

		public String getDate_of_Record() {
			return this.Date_of_Record;
		}

		public String Pot_Start_Date;

		public String getPot_Start_Date() {
			return this.Pot_Start_Date;
		}

		public String Pot_Voltage_NoLoss;

		public String getPot_Voltage_NoLoss() {
			return this.Pot_Voltage_NoLoss;
		}

		public String Pot_Current_SP;

		public String getPot_Current_SP() {
			return this.Pot_Current_SP;
		}

		public String Pot_Current_Act;

		public String getPot_Current_Act() {
			return this.Pot_Current_Act;
		}

		public String Alumina_Doses;

		public String getAlumina_Doses() {
			return this.Alumina_Doses;
		}

		public String Underfeeding_time;

		public String getUnderfeeding_time() {
			return this.Underfeeding_time;
		}

		public String hood_open_per24hrs;

		public String getHood_open_per24hrs() {
			return this.hood_open_per24hrs;
		}

		public String TrackingTime_Operation;

		public String getTrackingTime_Operation() {
			return this.TrackingTime_Operation;
		}

		public String Fast_feeding_time;

		public String getFast_feeding_time() {
			return this.Fast_feeding_time;
		}

		public String Ultra_feeding_time;

		public String getUltra_feeding_time() {
			return this.Ultra_feeding_time;
		}

		public String Failed_Contacts;

		public String getFailed_Contacts() {
			return this.Failed_Contacts;
		}

		public String Alf3_Doses_Total;

		public String getAlf3_Doses_Total() {
			return this.Alf3_Doses_Total;
		}

		public String AlF3_Doses_Auto;

		public String getAlF3_Doses_Auto() {
			return this.AlF3_Doses_Auto;
		}

		public String AlF3_Doses_Man;

		public String getAlF3_Doses_Man() {
			return this.AlF3_Doses_Man;
		}

		public String Instability_Time;

		public String getInstability_Time() {
			return this.Instability_Time;
		}

		public String Theo_Feeding_Time;

		public String getTheo_Feeding_Time() {
			return this.Theo_Feeding_Time;
		}

		public String FastFeed_Doses;

		public String getFastFeed_Doses() {
			return this.FastFeed_Doses;
		}

		public String Anode_Effect_Time;

		public String getAnode_Effect_Time() {
			return this.Anode_Effect_Time;
		}

		public String Anode_Manual_time;

		public String getAnode_Manual_time() {
			return this.Anode_Manual_time;
		}

		public String Talonaz_Time;

		public String getTalonaz_Time() {
			return this.Talonaz_Time;
		}

		public String Test_Value;

		public String getTest_Value() {
			return this.Test_Value;
		}

		public String Instability_Noise;

		public String getInstability_Noise() {
			return this.Instability_Noise;
		}

		public String Age_pot_months;

		public String getAge_pot_months() {
			return this.Age_pot_months;
		}

		public String AlF3_excess;

		public String getAlF3_excess() {
			return this.AlF3_excess;
		}

		public String CaF2_perc;

		public String getCaF2_perc() {
			return this.CaF2_perc;
		}

		public String Fe;

		public String getFe() {
			return this.Fe;
		}

		public String Si;

		public String getSi() {
			return this.Si;
		}

		public String Bath_Temp;

		public String getBath_Temp() {
			return this.Bath_Temp;
		}

		public String Metal_Tapping_KG;

		public String getMetal_Tapping_KG() {
			return this.Metal_Tapping_KG;
		}

		public String Planned_Tapping_Kg;

		public String getPlanned_Tapping_Kg() {
			return this.Planned_Tapping_Kg;
		}

		public String Number_Anode_Change;

		public String getNumber_Anode_Change() {
			return this.Number_Anode_Change;
		}

		public String Cath_Voltage_Drop;

		public String getCath_Voltage_Drop() {
			return this.Cath_Voltage_Drop;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML8HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML8HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR) {

				try {

					int length = 0;

					this.Potline = readString(dis);

					this.PotNo = readString(dis);

					this.Date_of_Record = readString(dis);

					this.Pot_Start_Date = readString(dis);

					this.Pot_Voltage_NoLoss = readString(dis);

					this.Pot_Current_SP = readString(dis);

					this.Pot_Current_Act = readString(dis);

					this.Alumina_Doses = readString(dis);

					this.Underfeeding_time = readString(dis);

					this.hood_open_per24hrs = readString(dis);

					this.TrackingTime_Operation = readString(dis);

					this.Fast_feeding_time = readString(dis);

					this.Ultra_feeding_time = readString(dis);

					this.Failed_Contacts = readString(dis);

					this.Alf3_Doses_Total = readString(dis);

					this.AlF3_Doses_Auto = readString(dis);

					this.AlF3_Doses_Man = readString(dis);

					this.Instability_Time = readString(dis);

					this.Theo_Feeding_Time = readString(dis);

					this.FastFeed_Doses = readString(dis);

					this.Anode_Effect_Time = readString(dis);

					this.Anode_Manual_time = readString(dis);

					this.Talonaz_Time = readString(dis);

					this.Test_Value = readString(dis);

					this.Instability_Noise = readString(dis);

					this.Age_pot_months = readString(dis);

					this.AlF3_excess = readString(dis);

					this.CaF2_perc = readString(dis);

					this.Fe = readString(dis);

					this.Si = readString(dis);

					this.Bath_Temp = readString(dis);

					this.Metal_Tapping_KG = readString(dis);

					this.Planned_Tapping_Kg = readString(dis);

					this.Number_Anode_Change = readString(dis);

					this.Cath_Voltage_Drop = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Potline, dos);

				// String

				writeString(this.PotNo, dos);

				// String

				writeString(this.Date_of_Record, dos);

				// String

				writeString(this.Pot_Start_Date, dos);

				// String

				writeString(this.Pot_Voltage_NoLoss, dos);

				// String

				writeString(this.Pot_Current_SP, dos);

				// String

				writeString(this.Pot_Current_Act, dos);

				// String

				writeString(this.Alumina_Doses, dos);

				// String

				writeString(this.Underfeeding_time, dos);

				// String

				writeString(this.hood_open_per24hrs, dos);

				// String

				writeString(this.TrackingTime_Operation, dos);

				// String

				writeString(this.Fast_feeding_time, dos);

				// String

				writeString(this.Ultra_feeding_time, dos);

				// String

				writeString(this.Failed_Contacts, dos);

				// String

				writeString(this.Alf3_Doses_Total, dos);

				// String

				writeString(this.AlF3_Doses_Auto, dos);

				// String

				writeString(this.AlF3_Doses_Man, dos);

				// String

				writeString(this.Instability_Time, dos);

				// String

				writeString(this.Theo_Feeding_Time, dos);

				// String

				writeString(this.FastFeed_Doses, dos);

				// String

				writeString(this.Anode_Effect_Time, dos);

				// String

				writeString(this.Anode_Manual_time, dos);

				// String

				writeString(this.Talonaz_Time, dos);

				// String

				writeString(this.Test_Value, dos);

				// String

				writeString(this.Instability_Noise, dos);

				// String

				writeString(this.Age_pot_months, dos);

				// String

				writeString(this.AlF3_excess, dos);

				// String

				writeString(this.CaF2_perc, dos);

				// String

				writeString(this.Fe, dos);

				// String

				writeString(this.Si, dos);

				// String

				writeString(this.Bath_Temp, dos);

				// String

				writeString(this.Metal_Tapping_KG, dos);

				// String

				writeString(this.Planned_Tapping_Kg, dos);

				// String

				writeString(this.Number_Anode_Change, dos);

				// String

				writeString(this.Cath_Voltage_Drop, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Potline=" + Potline);
			sb.append(",PotNo=" + PotNo);
			sb.append(",Date_of_Record=" + Date_of_Record);
			sb.append(",Pot_Start_Date=" + Pot_Start_Date);
			sb.append(",Pot_Voltage_NoLoss=" + Pot_Voltage_NoLoss);
			sb.append(",Pot_Current_SP=" + Pot_Current_SP);
			sb.append(",Pot_Current_Act=" + Pot_Current_Act);
			sb.append(",Alumina_Doses=" + Alumina_Doses);
			sb.append(",Underfeeding_time=" + Underfeeding_time);
			sb.append(",hood_open_per24hrs=" + hood_open_per24hrs);
			sb.append(",TrackingTime_Operation=" + TrackingTime_Operation);
			sb.append(",Fast_feeding_time=" + Fast_feeding_time);
			sb.append(",Ultra_feeding_time=" + Ultra_feeding_time);
			sb.append(",Failed_Contacts=" + Failed_Contacts);
			sb.append(",Alf3_Doses_Total=" + Alf3_Doses_Total);
			sb.append(",AlF3_Doses_Auto=" + AlF3_Doses_Auto);
			sb.append(",AlF3_Doses_Man=" + AlF3_Doses_Man);
			sb.append(",Instability_Time=" + Instability_Time);
			sb.append(",Theo_Feeding_Time=" + Theo_Feeding_Time);
			sb.append(",FastFeed_Doses=" + FastFeed_Doses);
			sb.append(",Anode_Effect_Time=" + Anode_Effect_Time);
			sb.append(",Anode_Manual_time=" + Anode_Manual_time);
			sb.append(",Talonaz_Time=" + Talonaz_Time);
			sb.append(",Test_Value=" + Test_Value);
			sb.append(",Instability_Noise=" + Instability_Noise);
			sb.append(",Age_pot_months=" + Age_pot_months);
			sb.append(",AlF3_excess=" + AlF3_excess);
			sb.append(",CaF2_perc=" + CaF2_perc);
			sb.append(",Fe=" + Fe);
			sb.append(",Si=" + Si);
			sb.append(",Bath_Temp=" + Bath_Temp);
			sb.append(",Metal_Tapping_KG=" + Metal_Tapping_KG);
			sb.append(",Planned_Tapping_Kg=" + Planned_Tapping_Kg);
			sb.append(",Number_Anode_Change=" + Number_Anode_Change);
			sb.append(",Cath_Voltage_Drop=" + Cath_Voltage_Drop);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(resultsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[0];

		public String POTNO;

		public String getPOTNO() {
			return this.POTNO;
		}

		public String POTLINE;

		public String getPOTLINE() {
			return this.POTLINE;
		}

		public String DATE_OF_RECORD;

		public String getDATE_OF_RECORD() {
			return this.DATE_OF_RECORD;
		}

		public String ALF3_EXCESS;

		public String getALF3_EXCESS() {
			return this.ALF3_EXCESS;
		}

		public String CAF2_PERC;

		public String getCAF2_PERC() {
			return this.CAF2_PERC;
		}

		public String FE;

		public String getFE() {
			return this.FE;
		}

		public String SI;

		public String getSI() {
			return this.SI;
		}

		public String BATH_TEMP;

		public String getBATH_TEMP() {
			return this.BATH_TEMP;
		}

		public String METAL_TAPPING_KG;

		public String getMETAL_TAPPING_KG() {
			return this.METAL_TAPPING_KG;
		}

		public String PLANNED_TAPPING_KG;

		public String getPLANNED_TAPPING_KG() {
			return this.PLANNED_TAPPING_KG;
		}

		public String NUMBER_ANODE_CHANGE;

		public String getNUMBER_ANODE_CHANGE() {
			return this.NUMBER_ANODE_CHANGE;
		}

		public String CATH_VOLTAGE_DROP;

		public String getCATH_VOLTAGE_DROP() {
			return this.CATH_VOLTAGE_DROP;
		}

		public String CP_POSTE;

		public String getCP_POSTE() {
			return this.CP_POSTE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML8HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML8HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR) {

				try {

					int length = 0;

					this.POTNO = readString(dis);

					this.POTLINE = readString(dis);

					this.DATE_OF_RECORD = readString(dis);

					this.ALF3_EXCESS = readString(dis);

					this.CAF2_PERC = readString(dis);

					this.FE = readString(dis);

					this.SI = readString(dis);

					this.BATH_TEMP = readString(dis);

					this.METAL_TAPPING_KG = readString(dis);

					this.PLANNED_TAPPING_KG = readString(dis);

					this.NUMBER_ANODE_CHANGE = readString(dis);

					this.CATH_VOLTAGE_DROP = readString(dis);

					this.CP_POSTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.POTNO, dos);

				// String

				writeString(this.POTLINE, dos);

				// String

				writeString(this.DATE_OF_RECORD, dos);

				// String

				writeString(this.ALF3_EXCESS, dos);

				// String

				writeString(this.CAF2_PERC, dos);

				// String

				writeString(this.FE, dos);

				// String

				writeString(this.SI, dos);

				// String

				writeString(this.BATH_TEMP, dos);

				// String

				writeString(this.METAL_TAPPING_KG, dos);

				// String

				writeString(this.PLANNED_TAPPING_KG, dos);

				// String

				writeString(this.NUMBER_ANODE_CHANGE, dos);

				// String

				writeString(this.CATH_VOLTAGE_DROP, dos);

				// String

				writeString(this.CP_POSTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("POTNO=" + POTNO);
			sb.append(",POTLINE=" + POTLINE);
			sb.append(",DATE_OF_RECORD=" + DATE_OF_RECORD);
			sb.append(",ALF3_EXCESS=" + ALF3_EXCESS);
			sb.append(",CAF2_PERC=" + CAF2_PERC);
			sb.append(",FE=" + FE);
			sb.append(",SI=" + SI);
			sb.append(",BATH_TEMP=" + BATH_TEMP);
			sb.append(",METAL_TAPPING_KG=" + METAL_TAPPING_KG);
			sb.append(",PLANNED_TAPPING_KG=" + PLANNED_TAPPING_KG);
			sb.append(",NUMBER_ANODE_CHANGE=" + NUMBER_ANODE_CHANGE);
			sb.append(",CATH_VOLTAGE_DROP=" + CATH_VOLTAGE_DROP);
			sb.append(",CP_POSTE=" + CP_POSTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_4Struct implements routines.system.IPersistableRow<after_tOracleInput_4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[0];

		public String POTNO;

		public String getPOTNO() {
			return this.POTNO;
		}

		public String POTLINE;

		public String getPOTLINE() {
			return this.POTLINE;
		}

		public String DATE_OF_RECORD;

		public String getDATE_OF_RECORD() {
			return this.DATE_OF_RECORD;
		}

		public String ALF3_EXCESS;

		public String getALF3_EXCESS() {
			return this.ALF3_EXCESS;
		}

		public String CAF2_PERC;

		public String getCAF2_PERC() {
			return this.CAF2_PERC;
		}

		public String FE;

		public String getFE() {
			return this.FE;
		}

		public String SI;

		public String getSI() {
			return this.SI;
		}

		public String BATH_TEMP;

		public String getBATH_TEMP() {
			return this.BATH_TEMP;
		}

		public String METAL_TAPPING_KG;

		public String getMETAL_TAPPING_KG() {
			return this.METAL_TAPPING_KG;
		}

		public String PLANNED_TAPPING_KG;

		public String getPLANNED_TAPPING_KG() {
			return this.PLANNED_TAPPING_KG;
		}

		public String NUMBER_ANODE_CHANGE;

		public String getNUMBER_ANODE_CHANGE() {
			return this.NUMBER_ANODE_CHANGE;
		}

		public String CATH_VOLTAGE_DROP;

		public String getCATH_VOLTAGE_DROP() {
			return this.CATH_VOLTAGE_DROP;
		}

		public String CP_POSTE;

		public String getCP_POSTE() {
			return this.CP_POSTE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML8HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML8HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR) {

				try {

					int length = 0;

					this.POTNO = readString(dis);

					this.POTLINE = readString(dis);

					this.DATE_OF_RECORD = readString(dis);

					this.ALF3_EXCESS = readString(dis);

					this.CAF2_PERC = readString(dis);

					this.FE = readString(dis);

					this.SI = readString(dis);

					this.BATH_TEMP = readString(dis);

					this.METAL_TAPPING_KG = readString(dis);

					this.PLANNED_TAPPING_KG = readString(dis);

					this.NUMBER_ANODE_CHANGE = readString(dis);

					this.CATH_VOLTAGE_DROP = readString(dis);

					this.CP_POSTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.POTNO, dos);

				// String

				writeString(this.POTLINE, dos);

				// String

				writeString(this.DATE_OF_RECORD, dos);

				// String

				writeString(this.ALF3_EXCESS, dos);

				// String

				writeString(this.CAF2_PERC, dos);

				// String

				writeString(this.FE, dos);

				// String

				writeString(this.SI, dos);

				// String

				writeString(this.BATH_TEMP, dos);

				// String

				writeString(this.METAL_TAPPING_KG, dos);

				// String

				writeString(this.PLANNED_TAPPING_KG, dos);

				// String

				writeString(this.NUMBER_ANODE_CHANGE, dos);

				// String

				writeString(this.CATH_VOLTAGE_DROP, dos);

				// String

				writeString(this.CP_POSTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("POTNO=" + POTNO);
			sb.append(",POTLINE=" + POTLINE);
			sb.append(",DATE_OF_RECORD=" + DATE_OF_RECORD);
			sb.append(",ALF3_EXCESS=" + ALF3_EXCESS);
			sb.append(",CAF2_PERC=" + CAF2_PERC);
			sb.append(",FE=" + FE);
			sb.append(",SI=" + SI);
			sb.append(",BATH_TEMP=" + BATH_TEMP);
			sb.append(",METAL_TAPPING_KG=" + METAL_TAPPING_KG);
			sb.append(",PLANNED_TAPPING_KG=" + PLANNED_TAPPING_KG);
			sb.append(",NUMBER_ANODE_CHANGE=" + NUMBER_ANODE_CHANGE);
			sb.append(",CATH_VOLTAGE_DROP=" + CATH_VOLTAGE_DROP);
			sb.append(",CP_POSTE=" + CP_POSTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJava_2Process(globalMap);
				tOracleInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				resultsStruct results = new resultsStruct();

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("results" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputXML_1 = 0;

				class BytesLimit65535_tFileOutputXML_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputXML_1().limitLog4jByte();

				String originalFileName_tFileOutputXML_1 = context.FilePath + "8HR-" + context.FileName + ".xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				String[] headers_tFileOutputXML_1 = new String[2];

				headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\"" + "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_1 = new String[1];

				headers_tFileOutputXML_1[1] = "<" + "root" + ">";

				footers_tFileOutputXML_1[0] = "</" + "root" + ">";

				int nb_line_tFileOutputXML_1 = 0;

				java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_tFileOutputXML_1), "ISO-8859-15"));

				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
				out_tFileOutputXML_1.newLine();

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				tHash_Lookup_row3.initGet();

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				resultsStruct results_tmp = new resultsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tOracleInput_4 begin ] start
				 */

				ok_Hash.put("tOracleInput_4", false);
				start_Hash.put("tOracleInput_4", System.currentTimeMillis());

				currentComponent = "tOracleInput_4";

				int tos_count_tOracleInput_4 = 0;

				class BytesLimit65535_tOracleInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tOracleInput_4().limitLog4jByte();

				int nb_line_tOracleInput_4 = 0;
				java.sql.Connection conn_tOracleInput_4 = null;
				String driverClass_tOracleInput_4 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_4);

				String url_tOracleInput_4 = null;
				url_tOracleInput_4 = "jdbc:oracle:thin:@" + "10.100.118.121" + ":" + "1521" + ":" + "PROD";

				String dbUser_tOracleInput_4 = "ge_user";

				final String decryptedPassword_tOracleInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("fe5230ac5a4fbfefc5617b528e86aa11");

				String dbPwd_tOracleInput_4 = decryptedPassword_tOracleInput_4;

				conn_tOracleInput_4 = java.sql.DriverManager.getConnection(url_tOracleInput_4, dbUser_tOracleInput_4, dbPwd_tOracleInput_4);
				java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_4.next()) {
					sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);

				java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

				String dbquery_tOracleInput_4 = "select\n    to_char(CP_NOCUVE) PotNo,\n    case when CP_SERIE_EN = 'A' then 'A'\n    when CP_SERIE_EN = 'B'  then 'B'\n    when CP_SERIE_EN = 'C' then 'C'\n    else CP_SERIE_EN\n    end as Potline, \n    to_char(CP_DATE,'DD-MM-YYYY') Date_of_Record,\n    to_char(CP_AIF3) AlF3_excess,\n    to_char(CP_CAF2) CaF2_perc,\n    to_char(CP_FE) Fe,\n    to_char(CP_SI) Si,\n    to_char(CP_TEMPERATURE) Bath_Temp,\n    to_char(CP_POIDS_REAL) Metal_Tapping_KG,\n    to_char(CP_POIDS_THEO) Planned_Tapping_Kg,\n    to_char(CP_CHNG_AN_PRG) Number_Anode_Change,\n    to_char(CP_CHUTE_CATODIQUE) Cath_Voltage_Drop,\n    case when cp_poste = 'Α' then to_char('2')\n    when cp_poste = 'Π'  then to_char('1')\n    when cp_poste = 'Ν' then to_char('3')\n    else cp_poste\n    end as cp_poste \n    FROM SYN_AL2000_CUVE_POSTE\n    where cp_date=(to_date(sysdate-1))";

				globalMap.put("tOracleInput_4_QUERY", dbquery_tOracleInput_4);

				java.sql.ResultSet rs_tOracleInput_4 = null;
				try {
					rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
					java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
					int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

					String tmpContent_tOracleInput_4 = null;

					while (rs_tOracleInput_4.next()) {
						nb_line_tOracleInput_4++;

						if (colQtyInRs_tOracleInput_4 < 1) {
							row1.POTNO = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(1);
							if (tmpContent_tOracleInput_4 != null) {
								row1.POTNO = tmpContent_tOracleInput_4;
							} else {
								row1.POTNO = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 2) {
							row1.POTLINE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(2);
							if (tmpContent_tOracleInput_4 != null) {
								row1.POTLINE = tmpContent_tOracleInput_4;
							} else {
								row1.POTLINE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 3) {
							row1.DATE_OF_RECORD = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(3);
							if (tmpContent_tOracleInput_4 != null) {
								row1.DATE_OF_RECORD = tmpContent_tOracleInput_4;
							} else {
								row1.DATE_OF_RECORD = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 4) {
							row1.ALF3_EXCESS = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(4);
							if (tmpContent_tOracleInput_4 != null) {
								row1.ALF3_EXCESS = tmpContent_tOracleInput_4;
							} else {
								row1.ALF3_EXCESS = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 5) {
							row1.CAF2_PERC = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(5);
							if (tmpContent_tOracleInput_4 != null) {
								row1.CAF2_PERC = tmpContent_tOracleInput_4;
							} else {
								row1.CAF2_PERC = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 6) {
							row1.FE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(6);
							if (tmpContent_tOracleInput_4 != null) {
								row1.FE = tmpContent_tOracleInput_4;
							} else {
								row1.FE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 7) {
							row1.SI = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(7);
							if (tmpContent_tOracleInput_4 != null) {
								row1.SI = tmpContent_tOracleInput_4;
							} else {
								row1.SI = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 8) {
							row1.BATH_TEMP = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(8);
							if (tmpContent_tOracleInput_4 != null) {
								row1.BATH_TEMP = tmpContent_tOracleInput_4;
							} else {
								row1.BATH_TEMP = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 9) {
							row1.METAL_TAPPING_KG = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(9);
							if (tmpContent_tOracleInput_4 != null) {
								row1.METAL_TAPPING_KG = tmpContent_tOracleInput_4;
							} else {
								row1.METAL_TAPPING_KG = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 10) {
							row1.PLANNED_TAPPING_KG = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(10);
							if (tmpContent_tOracleInput_4 != null) {
								row1.PLANNED_TAPPING_KG = tmpContent_tOracleInput_4;
							} else {
								row1.PLANNED_TAPPING_KG = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 11) {
							row1.NUMBER_ANODE_CHANGE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(11);
							if (tmpContent_tOracleInput_4 != null) {
								row1.NUMBER_ANODE_CHANGE = tmpContent_tOracleInput_4;
							} else {
								row1.NUMBER_ANODE_CHANGE = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 12) {
							row1.CATH_VOLTAGE_DROP = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(12);
							if (tmpContent_tOracleInput_4 != null) {
								row1.CATH_VOLTAGE_DROP = tmpContent_tOracleInput_4;
							} else {
								row1.CATH_VOLTAGE_DROP = null;
							}
						}
						if (colQtyInRs_tOracleInput_4 < 13) {
							row1.CP_POSTE = null;
						} else {

							tmpContent_tOracleInput_4 = rs_tOracleInput_4.getString(13);
							if (tmpContent_tOracleInput_4 != null) {
								row1.CP_POSTE = tmpContent_tOracleInput_4;
							} else {
								row1.CP_POSTE = null;
							}
						}

						/**
						 * [tOracleInput_4 begin ] stop
						 */

						/**
						 * [tOracleInput_4 main ] start
						 */

						currentComponent = "tOracleInput_4";

						tos_count_tOracleInput_4++;

						/**
						 * [tOracleInput_4 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row3"
						///////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								forceLooprow3 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow3 = true;
						} // G 21

						row3Struct row3 = null;

						while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

							// CALL close loop of lookup 'row3'

							row3Struct fromLookup_row3 = null;
							row3 = row3Default;

							if (!forceLooprow3) { // G 46

								fromLookup_row3 = tHash_Lookup_row3.next();

								if (fromLookup_row3 != null) {
									row3 = fromLookup_row3;
								}

							} // G 46

							forceLooprow3 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row2HashKey.POTLINE = row1.POTLINE;

								row2HashKey.POTNO = row1.POTNO;

								row2HashKey.DATE_OF_RECORD = row1.DATE_OF_RECORD;

								row2HashKey.CP_POSTE = row1.CP_POSTE;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																											// 071

								// System.out.println("WARNING: UNIQUE MATCH is
								// configured for the lookup 'row2' and it
								// contains more one result from keys :
								// row2.POTLINE = '" + row2HashKey.POTLINE + "',
								// row2.POTNO = '" + row2HashKey.POTNO + "',
								// row2.DATE_OF_RECORD = '" +
								// row2HashKey.DATE_OF_RECORD + "',
								// row2.CP_POSTE = '" + row2HashKey.CP_POSTE +
								// "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G
																							// 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								results = null;

								// # Output table : 'results'
								results_tmp.Potline = row2.POTLINE;
								results_tmp.PotNo = row2.POTNO;
								results_tmp.Date_of_Record = row2.DATE_OF_RECORD;
								results_tmp.Pot_Start_Date = row2.POT_START_DATE;
								results_tmp.Pot_Voltage_NoLoss = row2.POT_VOLTAGE_NOLOSS;
								results_tmp.Pot_Current_SP = row2.POT_CURRENT_SP;
								results_tmp.Pot_Current_Act = row2.POT_CURRENT_ACT;
								results_tmp.Alumina_Doses = row2.ALUMINA_DOSES;
								results_tmp.Underfeeding_time = row2.UNDERFEEDING_TIME;
								results_tmp.hood_open_per24hrs = row2.HOOD_OPEN_PER24HRS;
								results_tmp.TrackingTime_Operation = row2.TRACKINGTIME_OPERATION;
								results_tmp.Fast_feeding_time = row2.FAST_FEEDING_TIME;
								results_tmp.Ultra_feeding_time = row2.ULTRA_FEEDING_TIME;
								results_tmp.Failed_Contacts = row2.FAILED_CONTACTS;
								results_tmp.Alf3_Doses_Total = row2.ALF3_DOSES_TOTAL;
								results_tmp.AlF3_Doses_Auto = row2.ALF3_DOSES_AUTO;
								results_tmp.AlF3_Doses_Man = row2.ALF3_DOSES_MAN;
								results_tmp.Instability_Time = row2.INSTABILITY_TIME;
								results_tmp.Theo_Feeding_Time = row2.THEO_FEEDING_TIME;
								results_tmp.FastFeed_Doses = row2.FASTFEED_DOSES;
								results_tmp.Anode_Effect_Time = row2.ANODE_EFFECT_TIME;
								results_tmp.Anode_Manual_time = row2.ANODE_MANUAL_TIME;
								results_tmp.Talonaz_Time = row2.TALONAZ_TIME;
								results_tmp.Test_Value = row2.TEST_VALUE;
								results_tmp.Instability_Noise = row2.INSTABILITY_NOISE;
								results_tmp.Age_pot_months = row2.AGE_POT_MONTHS;
								results_tmp.AlF3_excess = row1.ALF3_EXCESS;
								results_tmp.CaF2_perc = row1.CAF2_PERC;
								results_tmp.Fe = row1.FE;
								results_tmp.Si = row1.SI;
								results_tmp.Bath_Temp = row1.BATH_TEMP;
								results_tmp.Metal_Tapping_KG = row1.METAL_TAPPING_KG;
								results_tmp.Planned_Tapping_Kg = row1.PLANNED_TAPPING_KG;
								results_tmp.Number_Anode_Change = row1.NUMBER_ANODE_CHANGE;
								results_tmp.Cath_Voltage_Drop = row1.CATH_VOLTAGE_DROP;
								results = results_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "results"
							if (results != null) {

								/**
								 * [tFileOutputXML_1 main ] start
								 */

								currentComponent = "tFileOutputXML_1";

								// results
								// results

								if (execStat) {
									runStat.updateStatOnConnection("results" + iterateId, 1, 1);
								}

								StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<" + "pot");
								tempRes_tFileOutputXML_1.append(">");
								out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Potline" + ">" + ((results.Potline == null) ? "" : (TalendString.checkCDATAForXML(results.Potline))) + "</" + "Potline" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "PotNo" + ">" + ((results.PotNo == null) ? "" : (TalendString.checkCDATAForXML(results.PotNo))) + "</" + "PotNo" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Date_of_Record" + ">" + ((results.Date_of_Record == null) ? "" : (TalendString.checkCDATAForXML(results.Date_of_Record))) + "</"
										+ "Date_of_Record" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Pot_Start_Date" + ">" + ((results.Pot_Start_Date == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Start_Date))) + "</"
										+ "Pot_Start_Date" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Pot_Voltage_NoLoss" + ">" + ((results.Pot_Voltage_NoLoss == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Voltage_NoLoss)))
										+ "</" + "Pot_Voltage_NoLoss" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Pot_Current_SP" + ">" + ((results.Pot_Current_SP == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Current_SP))) + "</"
										+ "Pot_Current_SP" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Pot_Current_Act" + ">" + ((results.Pot_Current_Act == null) ? "" : (TalendString.checkCDATAForXML(results.Pot_Current_Act))) + "</"
										+ "Pot_Current_Act" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Alumina_Doses" + ">" + ((results.Alumina_Doses == null) ? "" : (TalendString.checkCDATAForXML(results.Alumina_Doses))) + "</" + "Alumina_Doses" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Underfeeding_time" + ">" + ((results.Underfeeding_time == null) ? "" : (TalendString.checkCDATAForXML(results.Underfeeding_time)))
										+ "</" + "Underfeeding_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "hood_open_per24hrs" + ">" + ((results.hood_open_per24hrs == null) ? "" : (TalendString.checkCDATAForXML(results.hood_open_per24hrs)))
										+ "</" + "hood_open_per24hrs" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "TrackingTime_Operation" + ">"
										+ ((results.TrackingTime_Operation == null) ? "" : (TalendString.checkCDATAForXML(results.TrackingTime_Operation))) + "</" + "TrackingTime_Operation" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Fast_feeding_time" + ">" + ((results.Fast_feeding_time == null) ? "" : (TalendString.checkCDATAForXML(results.Fast_feeding_time)))
										+ "</" + "Fast_feeding_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Ultra_feeding_time" + ">" + ((results.Ultra_feeding_time == null) ? "" : (TalendString.checkCDATAForXML(results.Ultra_feeding_time)))
										+ "</" + "Ultra_feeding_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Failed_Contacts" + ">" + ((results.Failed_Contacts == null) ? "" : (TalendString.checkCDATAForXML(results.Failed_Contacts))) + "</"
										+ "Failed_Contacts" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Alf3_Doses_Total" + ">" + ((results.Alf3_Doses_Total == null) ? "" : (TalendString.checkCDATAForXML(results.Alf3_Doses_Total))) + "</"
										+ "Alf3_Doses_Total" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "AlF3_Doses_Auto" + ">" + ((results.AlF3_Doses_Auto == null) ? "" : (TalendString.checkCDATAForXML(results.AlF3_Doses_Auto))) + "</"
										+ "AlF3_Doses_Auto" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "AlF3_Doses_Man" + ">" + ((results.AlF3_Doses_Man == null) ? "" : (TalendString.checkCDATAForXML(results.AlF3_Doses_Man))) + "</"
										+ "AlF3_Doses_Man" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Instability_Time" + ">" + ((results.Instability_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Instability_Time))) + "</"
										+ "Instability_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Theo_Feeding_Time" + ">" + ((results.Theo_Feeding_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Theo_Feeding_Time)))
										+ "</" + "Theo_Feeding_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "FastFeed_Doses" + ">" + ((results.FastFeed_Doses == null) ? "" : (TalendString.checkCDATAForXML(results.FastFeed_Doses))) + "</"
										+ "FastFeed_Doses" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Anode_Effect_Time" + ">" + ((results.Anode_Effect_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Effect_Time)))
										+ "</" + "Anode_Effect_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Anode_Manual_time" + ">" + ((results.Anode_Manual_time == null) ? "" : (TalendString.checkCDATAForXML(results.Anode_Manual_time)))
										+ "</" + "Anode_Manual_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write(
										"<" + "Talonaz_Time" + ">" + ((results.Talonaz_Time == null) ? "" : (TalendString.checkCDATAForXML(results.Talonaz_Time))) + "</" + "Talonaz_Time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Test_Value" + ">" + ((results.Test_Value == null) ? "" : (TalendString.checkCDATAForXML(results.Test_Value))) + "</" + "Test_Value" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Instability_Noise" + ">" + ((results.Instability_Noise == null) ? "" : (TalendString.checkCDATAForXML(results.Instability_Noise)))
										+ "</" + "Instability_Noise" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Age_pot_months" + ">" + ((results.Age_pot_months == null) ? "" : (TalendString.checkCDATAForXML(results.Age_pot_months))) + "</"
										+ "Age_pot_months" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "AlF3_excess" + ">" + ((results.AlF3_excess == null) ? "" : (TalendString.checkCDATAForXML(results.AlF3_excess))) + "</" + "AlF3_excess" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "CaF2_perc" + ">" + ((results.CaF2_perc == null) ? "" : (TalendString.checkCDATAForXML(results.CaF2_perc))) + "</" + "CaF2_perc" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Fe" + ">" + ((results.Fe == null) ? "" : (TalendString.checkCDATAForXML(results.Fe))) + "</" + "Fe" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Si" + ">" + ((results.Si == null) ? "" : (TalendString.checkCDATAForXML(results.Si))) + "</" + "Si" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1
										.write("<" + "Bath_Temp" + ">" + ((results.Bath_Temp == null) ? "" : (TalendString.checkCDATAForXML(results.Bath_Temp))) + "</" + "Bath_Temp" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Metal_Tapping_KG" + ">" + ((results.Metal_Tapping_KG == null) ? "" : (TalendString.checkCDATAForXML(results.Metal_Tapping_KG))) + "</"
										+ "Metal_Tapping_KG" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Planned_Tapping_Kg" + ">" + ((results.Planned_Tapping_Kg == null) ? "" : (TalendString.checkCDATAForXML(results.Planned_Tapping_Kg)))
										+ "</" + "Planned_Tapping_Kg" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Number_Anode_Change" + ">"
										+ ((results.Number_Anode_Change == null) ? "" : (TalendString.checkCDATAForXML(results.Number_Anode_Change))) + "</" + "Number_Anode_Change" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "Cath_Voltage_Drop" + ">" + ((results.Cath_Voltage_Drop == null) ? "" : (TalendString.checkCDATAForXML(results.Cath_Voltage_Drop)))
										+ "</" + "Cath_Voltage_Drop" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("</" + "pot" + ">");

								out_tFileOutputXML_1.newLine();

								nb_line_tFileOutputXML_1++;

								tos_count_tFileOutputXML_1++;

								/**
								 * [tFileOutputXML_1 main ] stop
								 */

							} // End of branch "results"

						} // close loop of lookup 'row3' // G_TM_M_043

						/**
						 * [tOracleInput_4 end ] start
						 */

						currentComponent = "tOracleInput_4";

					}
				} finally {
					stmt_tOracleInput_4.close();

					if (conn_tOracleInput_4 != null && !conn_tOracleInput_4.isClosed()) {

						conn_tOracleInput_4.close();

					}

				}

				globalMap.put("tOracleInput_4_NB_LINE", nb_line_tOracleInput_4);

				ok_Hash.put("tOracleInput_4", true);
				end_Hash.put("tOracleInput_4", System.currentTimeMillis());

				/**
				 * [tOracleInput_4 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.close();
				globalMap.put("tFileOutputXML_1_NB_LINE", nb_line_tFileOutputXML_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("results" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tOracleInput_4 finally ] start
				 */

				currentComponent = "tOracleInput_4";

				/**
				 * [tOracleInput_4 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				class BytesLimit65535_tAdvancedHash_row3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row3().limitLog4jByte();

				// connection name:row3
				// source node:tJava_2 - inputs:(after_tOracleInput_4)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row3,row2)
				// outputs:(results)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				class BytesLimit65535_tJava_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_2().limitLog4jByte();

				context.FileName = TalendDate.getDate("yyyyMMdd_hhmmss");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row3 main ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				// row3
				// row3

				if (execStat) {
					runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
				}

				row3Struct row3_HashRow = new row3Struct();

				tHash_Lookup_row3.put(row3_HashRow);

				tos_count_tAdvancedHash_row3++;

				/**
				 * [tAdvancedHash_row3 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String POTLINE;

		public String getPOTLINE() {
			return this.POTLINE;
		}

		public String POTNO;

		public String getPOTNO() {
			return this.POTNO;
		}

		public String DATE_OF_RECORD;

		public String getDATE_OF_RECORD() {
			return this.DATE_OF_RECORD;
		}

		public String POT_START_DATE;

		public String getPOT_START_DATE() {
			return this.POT_START_DATE;
		}

		public String POT_VOLTAGE_NOLOSS;

		public String getPOT_VOLTAGE_NOLOSS() {
			return this.POT_VOLTAGE_NOLOSS;
		}

		public String POT_CURRENT_SP;

		public String getPOT_CURRENT_SP() {
			return this.POT_CURRENT_SP;
		}

		public String POT_CURRENT_ACT;

		public String getPOT_CURRENT_ACT() {
			return this.POT_CURRENT_ACT;
		}

		public String ALUMINA_DOSES;

		public String getALUMINA_DOSES() {
			return this.ALUMINA_DOSES;
		}

		public String UNDERFEEDING_TIME;

		public String getUNDERFEEDING_TIME() {
			return this.UNDERFEEDING_TIME;
		}

		public String HOOD_OPEN_PER24HRS;

		public String getHOOD_OPEN_PER24HRS() {
			return this.HOOD_OPEN_PER24HRS;
		}

		public String TRACKINGTIME_OPERATION;

		public String getTRACKINGTIME_OPERATION() {
			return this.TRACKINGTIME_OPERATION;
		}

		public String FAST_FEEDING_TIME;

		public String getFAST_FEEDING_TIME() {
			return this.FAST_FEEDING_TIME;
		}

		public String ULTRA_FEEDING_TIME;

		public String getULTRA_FEEDING_TIME() {
			return this.ULTRA_FEEDING_TIME;
		}

		public String FAILED_CONTACTS;

		public String getFAILED_CONTACTS() {
			return this.FAILED_CONTACTS;
		}

		public String ALF3_DOSES_TOTAL;

		public String getALF3_DOSES_TOTAL() {
			return this.ALF3_DOSES_TOTAL;
		}

		public String ALF3_DOSES_AUTO;

		public String getALF3_DOSES_AUTO() {
			return this.ALF3_DOSES_AUTO;
		}

		public String ALF3_DOSES_MAN;

		public String getALF3_DOSES_MAN() {
			return this.ALF3_DOSES_MAN;
		}

		public String INSTABILITY_TIME;

		public String getINSTABILITY_TIME() {
			return this.INSTABILITY_TIME;
		}

		public String THEO_FEEDING_TIME;

		public String getTHEO_FEEDING_TIME() {
			return this.THEO_FEEDING_TIME;
		}

		public String FASTFEED_DOSES;

		public String getFASTFEED_DOSES() {
			return this.FASTFEED_DOSES;
		}

		public String ANODE_EFFECT_TIME;

		public String getANODE_EFFECT_TIME() {
			return this.ANODE_EFFECT_TIME;
		}

		public String ANODE_MANUAL_TIME;

		public String getANODE_MANUAL_TIME() {
			return this.ANODE_MANUAL_TIME;
		}

		public String TALONAZ_TIME;

		public String getTALONAZ_TIME() {
			return this.TALONAZ_TIME;
		}

		public String TEST_VALUE;

		public String getTEST_VALUE() {
			return this.TEST_VALUE;
		}

		public String INSTABILITY_NOISE;

		public String getINSTABILITY_NOISE() {
			return this.INSTABILITY_NOISE;
		}

		public String AGE_POT_MONTHS;

		public String getAGE_POT_MONTHS() {
			return this.AGE_POT_MONTHS;
		}

		public String CP_POSTE;

		public String getCP_POSTE() {
			return this.CP_POSTE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.POTLINE == null) ? 0 : this.POTLINE.hashCode());

				result = prime * result + ((this.POTNO == null) ? 0 : this.POTNO.hashCode());

				result = prime * result + ((this.DATE_OF_RECORD == null) ? 0 : this.DATE_OF_RECORD.hashCode());

				result = prime * result + ((this.CP_POSTE == null) ? 0 : this.CP_POSTE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.POTLINE == null) {
				if (other.POTLINE != null)
					return false;

			} else if (!this.POTLINE.equals(other.POTLINE))

				return false;

			if (this.POTNO == null) {
				if (other.POTNO != null)
					return false;

			} else if (!this.POTNO.equals(other.POTNO))

				return false;

			if (this.DATE_OF_RECORD == null) {
				if (other.DATE_OF_RECORD != null)
					return false;

			} else if (!this.DATE_OF_RECORD.equals(other.DATE_OF_RECORD))

				return false;

			if (this.CP_POSTE == null) {
				if (other.CP_POSTE != null)
					return false;

			} else if (!this.CP_POSTE.equals(other.CP_POSTE))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.POTLINE = this.POTLINE;
			other.POTNO = this.POTNO;
			other.DATE_OF_RECORD = this.DATE_OF_RECORD;
			other.POT_START_DATE = this.POT_START_DATE;
			other.POT_VOLTAGE_NOLOSS = this.POT_VOLTAGE_NOLOSS;
			other.POT_CURRENT_SP = this.POT_CURRENT_SP;
			other.POT_CURRENT_ACT = this.POT_CURRENT_ACT;
			other.ALUMINA_DOSES = this.ALUMINA_DOSES;
			other.UNDERFEEDING_TIME = this.UNDERFEEDING_TIME;
			other.HOOD_OPEN_PER24HRS = this.HOOD_OPEN_PER24HRS;
			other.TRACKINGTIME_OPERATION = this.TRACKINGTIME_OPERATION;
			other.FAST_FEEDING_TIME = this.FAST_FEEDING_TIME;
			other.ULTRA_FEEDING_TIME = this.ULTRA_FEEDING_TIME;
			other.FAILED_CONTACTS = this.FAILED_CONTACTS;
			other.ALF3_DOSES_TOTAL = this.ALF3_DOSES_TOTAL;
			other.ALF3_DOSES_AUTO = this.ALF3_DOSES_AUTO;
			other.ALF3_DOSES_MAN = this.ALF3_DOSES_MAN;
			other.INSTABILITY_TIME = this.INSTABILITY_TIME;
			other.THEO_FEEDING_TIME = this.THEO_FEEDING_TIME;
			other.FASTFEED_DOSES = this.FASTFEED_DOSES;
			other.ANODE_EFFECT_TIME = this.ANODE_EFFECT_TIME;
			other.ANODE_MANUAL_TIME = this.ANODE_MANUAL_TIME;
			other.TALONAZ_TIME = this.TALONAZ_TIME;
			other.TEST_VALUE = this.TEST_VALUE;
			other.INSTABILITY_NOISE = this.INSTABILITY_NOISE;
			other.AGE_POT_MONTHS = this.AGE_POT_MONTHS;
			other.CP_POSTE = this.CP_POSTE;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.POTLINE = this.POTLINE;
			other.POTNO = this.POTNO;
			other.DATE_OF_RECORD = this.DATE_OF_RECORD;
			other.CP_POSTE = this.CP_POSTE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_ETLXML8HR.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_ETLXML8HR.length == 0) {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_ETLXML8HR = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_ETLXML8HR, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_ETLXML8HR) {

				try {

					int length = 0;

					this.POTLINE = readString(dis);

					this.POTNO = readString(dis);

					this.DATE_OF_RECORD = readString(dis);

					this.CP_POSTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.POTLINE, dos);

				// String

				writeString(this.POTNO, dos);

				// String

				writeString(this.DATE_OF_RECORD, dos);

				// String

				writeString(this.CP_POSTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.POT_START_DATE = readString(dis, ois);

				this.POT_VOLTAGE_NOLOSS = readString(dis, ois);

				this.POT_CURRENT_SP = readString(dis, ois);

				this.POT_CURRENT_ACT = readString(dis, ois);

				this.ALUMINA_DOSES = readString(dis, ois);

				this.UNDERFEEDING_TIME = readString(dis, ois);

				this.HOOD_OPEN_PER24HRS = readString(dis, ois);

				this.TRACKINGTIME_OPERATION = readString(dis, ois);

				this.FAST_FEEDING_TIME = readString(dis, ois);

				this.ULTRA_FEEDING_TIME = readString(dis, ois);

				this.FAILED_CONTACTS = readString(dis, ois);

				this.ALF3_DOSES_TOTAL = readString(dis, ois);

				this.ALF3_DOSES_AUTO = readString(dis, ois);

				this.ALF3_DOSES_MAN = readString(dis, ois);

				this.INSTABILITY_TIME = readString(dis, ois);

				this.THEO_FEEDING_TIME = readString(dis, ois);

				this.FASTFEED_DOSES = readString(dis, ois);

				this.ANODE_EFFECT_TIME = readString(dis, ois);

				this.ANODE_MANUAL_TIME = readString(dis, ois);

				this.TALONAZ_TIME = readString(dis, ois);

				this.TEST_VALUE = readString(dis, ois);

				this.INSTABILITY_NOISE = readString(dis, ois);

				this.AGE_POT_MONTHS = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.POT_START_DATE, dos, oos);

				writeString(this.POT_VOLTAGE_NOLOSS, dos, oos);

				writeString(this.POT_CURRENT_SP, dos, oos);

				writeString(this.POT_CURRENT_ACT, dos, oos);

				writeString(this.ALUMINA_DOSES, dos, oos);

				writeString(this.UNDERFEEDING_TIME, dos, oos);

				writeString(this.HOOD_OPEN_PER24HRS, dos, oos);

				writeString(this.TRACKINGTIME_OPERATION, dos, oos);

				writeString(this.FAST_FEEDING_TIME, dos, oos);

				writeString(this.ULTRA_FEEDING_TIME, dos, oos);

				writeString(this.FAILED_CONTACTS, dos, oos);

				writeString(this.ALF3_DOSES_TOTAL, dos, oos);

				writeString(this.ALF3_DOSES_AUTO, dos, oos);

				writeString(this.ALF3_DOSES_MAN, dos, oos);

				writeString(this.INSTABILITY_TIME, dos, oos);

				writeString(this.THEO_FEEDING_TIME, dos, oos);

				writeString(this.FASTFEED_DOSES, dos, oos);

				writeString(this.ANODE_EFFECT_TIME, dos, oos);

				writeString(this.ANODE_MANUAL_TIME, dos, oos);

				writeString(this.TALONAZ_TIME, dos, oos);

				writeString(this.TEST_VALUE, dos, oos);

				writeString(this.INSTABILITY_NOISE, dos, oos);

				writeString(this.AGE_POT_MONTHS, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("POTLINE=" + POTLINE);
			sb.append(",POTNO=" + POTNO);
			sb.append(",DATE_OF_RECORD=" + DATE_OF_RECORD);
			sb.append(",POT_START_DATE=" + POT_START_DATE);
			sb.append(",POT_VOLTAGE_NOLOSS=" + POT_VOLTAGE_NOLOSS);
			sb.append(",POT_CURRENT_SP=" + POT_CURRENT_SP);
			sb.append(",POT_CURRENT_ACT=" + POT_CURRENT_ACT);
			sb.append(",ALUMINA_DOSES=" + ALUMINA_DOSES);
			sb.append(",UNDERFEEDING_TIME=" + UNDERFEEDING_TIME);
			sb.append(",HOOD_OPEN_PER24HRS=" + HOOD_OPEN_PER24HRS);
			sb.append(",TRACKINGTIME_OPERATION=" + TRACKINGTIME_OPERATION);
			sb.append(",FAST_FEEDING_TIME=" + FAST_FEEDING_TIME);
			sb.append(",ULTRA_FEEDING_TIME=" + ULTRA_FEEDING_TIME);
			sb.append(",FAILED_CONTACTS=" + FAILED_CONTACTS);
			sb.append(",ALF3_DOSES_TOTAL=" + ALF3_DOSES_TOTAL);
			sb.append(",ALF3_DOSES_AUTO=" + ALF3_DOSES_AUTO);
			sb.append(",ALF3_DOSES_MAN=" + ALF3_DOSES_MAN);
			sb.append(",INSTABILITY_TIME=" + INSTABILITY_TIME);
			sb.append(",THEO_FEEDING_TIME=" + THEO_FEEDING_TIME);
			sb.append(",FASTFEED_DOSES=" + FASTFEED_DOSES);
			sb.append(",ANODE_EFFECT_TIME=" + ANODE_EFFECT_TIME);
			sb.append(",ANODE_MANUAL_TIME=" + ANODE_MANUAL_TIME);
			sb.append(",TALONAZ_TIME=" + TALONAZ_TIME);
			sb.append(",TEST_VALUE=" + TEST_VALUE);
			sb.append(",INSTABILITY_NOISE=" + INSTABILITY_NOISE);
			sb.append(",AGE_POT_MONTHS=" + AGE_POT_MONTHS);
			sb.append(",CP_POSTE=" + CP_POSTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.POTLINE, other.POTLINE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.POTNO, other.POTNO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.DATE_OF_RECORD, other.DATE_OF_RECORD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CP_POSTE, other.CP_POSTE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				class BytesLimit65535_tAdvancedHash_row2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row2().limitLog4jByte();

				// connection name:row2
				// source node:tOracleInput_3 - inputs:(after_tOracleInput_4)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row3,row2)
				// outputs:(results)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tOracleInput_3 begin ] start
				 */

				ok_Hash.put("tOracleInput_3", false);
				start_Hash.put("tOracleInput_3", System.currentTimeMillis());

				currentComponent = "tOracleInput_3";

				int tos_count_tOracleInput_3 = 0;

				class BytesLimit65535_tOracleInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tOracleInput_3().limitLog4jByte();

				int nb_line_tOracleInput_3 = 0;
				java.sql.Connection conn_tOracleInput_3 = null;
				String driverClass_tOracleInput_3 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_3);

				String url_tOracleInput_3 = null;
				url_tOracleInput_3 = "jdbc:oracle:thin:@" + "10.100.118.121" + ":" + "1521" + ":" + "PROD";

				String dbUser_tOracleInput_3 = "ge_user";

				final String decryptedPassword_tOracleInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("fe5230ac5a4fbfefc5617b528e86aa11");

				String dbPwd_tOracleInput_3 = decryptedPassword_tOracleInput_3;

				conn_tOracleInput_3 = java.sql.DriverManager.getConnection(url_tOracleInput_3, dbUser_tOracleInput_3, dbPwd_tOracleInput_3);
				java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_3.next()) {
					sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);

				java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

				String dbquery_tOracleInput_3 = "SELECT \n    case when CP_BSQ_SER_ID = '0A' then 'A'\n    when CP_BSQ_SER_ID = '0B'  then 'B'\n    when CP_BSQ_SER_ID = '0C' then 'C'\n    end as Potline, \n    to_char(CP_BSQ_CUV_ID) PotNo,\n    to_char(CP_DATE,'DD-MM-YYYY') Date_of_Record,\n    to_char(CP_BSQ_START_DATE,'DD-MM-YYYY') Pot_Start_Date,\n    to_char(CP_UMM) Pot_Voltage_NoLoss,\n    to_char(CP_ICC) Pot_Current_SP,\n    to_char(CP_IMM) Pot_Current_Act,\n    to_char(CP_NDAL2O3) Alumina_Doses,\n    to_char(CP_TSOUS) Underfeeding_time,\n    to_char(CP_TXTCAPOU) hood_open_per24hrs,\n    to_char(CP_TATT) TrackingTime_Operation,\n    to_char(CP_TSUR) Fast_feeding_time,\n    to_char(CP_TULTRA) Ultra_feeding_time,\n    to_char(CP_DEFCON) Failed_Contacts,\n    to_char(CP_NDALF3) Alf3_Doses_Total,\n    to_char(CP_NDALF3A) AlF3_Doses_Auto,\n    to_char(CP_NDALF3M) AlF3_Doses_Man,\n    to_char(CP_TINS) Instability_Time,\n    to_char(CP_TTHEO) Theo_Feeding_Time,\n    to_char(CP_NSURAL) FastFeed_Doses,\n    to_char(CP_TTEA) Anode_Effect_Time,\n    to_char(CP_TMAN) Anode_Manual_time,\n    to_char(CP_TTAL) Talonaz_Time,\n    to_char(CP_VTEST) Test_Value,\n    to_char(CP_WM) Instability_Noise,\n    to_char(( (CP_DATE) - (CP_BSQ_START_DATE) ) / 30.5) Age_pot_months,\n    to_char(cp_poste) as cp_poste\n    FROM SYN_ELEC_CUVE_POSTE\n    where cp_date=(to_date(sysdate-1)) ";

				globalMap.put("tOracleInput_3_QUERY", dbquery_tOracleInput_3);

				java.sql.ResultSet rs_tOracleInput_3 = null;
				try {
					rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
					java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
					int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

					String tmpContent_tOracleInput_3 = null;

					while (rs_tOracleInput_3.next()) {
						nb_line_tOracleInput_3++;

						if (colQtyInRs_tOracleInput_3 < 1) {
							row2.POTLINE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(1);
							if (tmpContent_tOracleInput_3 != null) {
								row2.POTLINE = tmpContent_tOracleInput_3;
							} else {
								row2.POTLINE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 2) {
							row2.POTNO = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(2);
							if (tmpContent_tOracleInput_3 != null) {
								row2.POTNO = tmpContent_tOracleInput_3;
							} else {
								row2.POTNO = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 3) {
							row2.DATE_OF_RECORD = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(3);
							if (tmpContent_tOracleInput_3 != null) {
								row2.DATE_OF_RECORD = tmpContent_tOracleInput_3;
							} else {
								row2.DATE_OF_RECORD = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 4) {
							row2.POT_START_DATE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(4);
							if (tmpContent_tOracleInput_3 != null) {
								row2.POT_START_DATE = tmpContent_tOracleInput_3;
							} else {
								row2.POT_START_DATE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 5) {
							row2.POT_VOLTAGE_NOLOSS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(5);
							if (tmpContent_tOracleInput_3 != null) {
								row2.POT_VOLTAGE_NOLOSS = tmpContent_tOracleInput_3;
							} else {
								row2.POT_VOLTAGE_NOLOSS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 6) {
							row2.POT_CURRENT_SP = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(6);
							if (tmpContent_tOracleInput_3 != null) {
								row2.POT_CURRENT_SP = tmpContent_tOracleInput_3;
							} else {
								row2.POT_CURRENT_SP = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 7) {
							row2.POT_CURRENT_ACT = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(7);
							if (tmpContent_tOracleInput_3 != null) {
								row2.POT_CURRENT_ACT = tmpContent_tOracleInput_3;
							} else {
								row2.POT_CURRENT_ACT = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 8) {
							row2.ALUMINA_DOSES = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(8);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ALUMINA_DOSES = tmpContent_tOracleInput_3;
							} else {
								row2.ALUMINA_DOSES = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 9) {
							row2.UNDERFEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(9);
							if (tmpContent_tOracleInput_3 != null) {
								row2.UNDERFEEDING_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.UNDERFEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 10) {
							row2.HOOD_OPEN_PER24HRS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(10);
							if (tmpContent_tOracleInput_3 != null) {
								row2.HOOD_OPEN_PER24HRS = tmpContent_tOracleInput_3;
							} else {
								row2.HOOD_OPEN_PER24HRS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 11) {
							row2.TRACKINGTIME_OPERATION = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(11);
							if (tmpContent_tOracleInput_3 != null) {
								row2.TRACKINGTIME_OPERATION = tmpContent_tOracleInput_3;
							} else {
								row2.TRACKINGTIME_OPERATION = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 12) {
							row2.FAST_FEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(12);
							if (tmpContent_tOracleInput_3 != null) {
								row2.FAST_FEEDING_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.FAST_FEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 13) {
							row2.ULTRA_FEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(13);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ULTRA_FEEDING_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.ULTRA_FEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 14) {
							row2.FAILED_CONTACTS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(14);
							if (tmpContent_tOracleInput_3 != null) {
								row2.FAILED_CONTACTS = tmpContent_tOracleInput_3;
							} else {
								row2.FAILED_CONTACTS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 15) {
							row2.ALF3_DOSES_TOTAL = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(15);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ALF3_DOSES_TOTAL = tmpContent_tOracleInput_3;
							} else {
								row2.ALF3_DOSES_TOTAL = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 16) {
							row2.ALF3_DOSES_AUTO = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(16);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ALF3_DOSES_AUTO = tmpContent_tOracleInput_3;
							} else {
								row2.ALF3_DOSES_AUTO = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 17) {
							row2.ALF3_DOSES_MAN = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(17);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ALF3_DOSES_MAN = tmpContent_tOracleInput_3;
							} else {
								row2.ALF3_DOSES_MAN = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 18) {
							row2.INSTABILITY_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(18);
							if (tmpContent_tOracleInput_3 != null) {
								row2.INSTABILITY_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.INSTABILITY_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 19) {
							row2.THEO_FEEDING_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(19);
							if (tmpContent_tOracleInput_3 != null) {
								row2.THEO_FEEDING_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.THEO_FEEDING_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 20) {
							row2.FASTFEED_DOSES = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(20);
							if (tmpContent_tOracleInput_3 != null) {
								row2.FASTFEED_DOSES = tmpContent_tOracleInput_3;
							} else {
								row2.FASTFEED_DOSES = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 21) {
							row2.ANODE_EFFECT_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(21);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ANODE_EFFECT_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.ANODE_EFFECT_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 22) {
							row2.ANODE_MANUAL_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(22);
							if (tmpContent_tOracleInput_3 != null) {
								row2.ANODE_MANUAL_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.ANODE_MANUAL_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 23) {
							row2.TALONAZ_TIME = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(23);
							if (tmpContent_tOracleInput_3 != null) {
								row2.TALONAZ_TIME = tmpContent_tOracleInput_3;
							} else {
								row2.TALONAZ_TIME = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 24) {
							row2.TEST_VALUE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(24);
							if (tmpContent_tOracleInput_3 != null) {
								row2.TEST_VALUE = tmpContent_tOracleInput_3;
							} else {
								row2.TEST_VALUE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 25) {
							row2.INSTABILITY_NOISE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(25);
							if (tmpContent_tOracleInput_3 != null) {
								row2.INSTABILITY_NOISE = tmpContent_tOracleInput_3;
							} else {
								row2.INSTABILITY_NOISE = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 26) {
							row2.AGE_POT_MONTHS = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(26);
							if (tmpContent_tOracleInput_3 != null) {
								row2.AGE_POT_MONTHS = tmpContent_tOracleInput_3;
							} else {
								row2.AGE_POT_MONTHS = null;
							}
						}
						if (colQtyInRs_tOracleInput_3 < 27) {
							row2.CP_POSTE = null;
						} else {

							tmpContent_tOracleInput_3 = rs_tOracleInput_3.getString(27);
							if (tmpContent_tOracleInput_3 != null) {
								row2.CP_POSTE = tmpContent_tOracleInput_3;
							} else {
								row2.CP_POSTE = null;
							}
						}

						/**
						 * [tOracleInput_3 begin ] stop
						 */

						/**
						 * [tOracleInput_3 main ] start
						 */

						currentComponent = "tOracleInput_3";

						tos_count_tOracleInput_3++;

						/**
						 * [tOracleInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.POTLINE = row2.POTLINE;

						row2_HashRow.POTNO = row2.POTNO;

						row2_HashRow.DATE_OF_RECORD = row2.DATE_OF_RECORD;

						row2_HashRow.POT_START_DATE = row2.POT_START_DATE;

						row2_HashRow.POT_VOLTAGE_NOLOSS = row2.POT_VOLTAGE_NOLOSS;

						row2_HashRow.POT_CURRENT_SP = row2.POT_CURRENT_SP;

						row2_HashRow.POT_CURRENT_ACT = row2.POT_CURRENT_ACT;

						row2_HashRow.ALUMINA_DOSES = row2.ALUMINA_DOSES;

						row2_HashRow.UNDERFEEDING_TIME = row2.UNDERFEEDING_TIME;

						row2_HashRow.HOOD_OPEN_PER24HRS = row2.HOOD_OPEN_PER24HRS;

						row2_HashRow.TRACKINGTIME_OPERATION = row2.TRACKINGTIME_OPERATION;

						row2_HashRow.FAST_FEEDING_TIME = row2.FAST_FEEDING_TIME;

						row2_HashRow.ULTRA_FEEDING_TIME = row2.ULTRA_FEEDING_TIME;

						row2_HashRow.FAILED_CONTACTS = row2.FAILED_CONTACTS;

						row2_HashRow.ALF3_DOSES_TOTAL = row2.ALF3_DOSES_TOTAL;

						row2_HashRow.ALF3_DOSES_AUTO = row2.ALF3_DOSES_AUTO;

						row2_HashRow.ALF3_DOSES_MAN = row2.ALF3_DOSES_MAN;

						row2_HashRow.INSTABILITY_TIME = row2.INSTABILITY_TIME;

						row2_HashRow.THEO_FEEDING_TIME = row2.THEO_FEEDING_TIME;

						row2_HashRow.FASTFEED_DOSES = row2.FASTFEED_DOSES;

						row2_HashRow.ANODE_EFFECT_TIME = row2.ANODE_EFFECT_TIME;

						row2_HashRow.ANODE_MANUAL_TIME = row2.ANODE_MANUAL_TIME;

						row2_HashRow.TALONAZ_TIME = row2.TALONAZ_TIME;

						row2_HashRow.TEST_VALUE = row2.TEST_VALUE;

						row2_HashRow.INSTABILITY_NOISE = row2.INSTABILITY_NOISE;

						row2_HashRow.AGE_POT_MONTHS = row2.AGE_POT_MONTHS;

						row2_HashRow.CP_POSTE = row2.CP_POSTE;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tOracleInput_3 end ] start
						 */

						currentComponent = "tOracleInput_3";

					}
				} finally {
					stmt_tOracleInput_3.close();

					if (conn_tOracleInput_3 != null && !conn_tOracleInput_3.isClosed()) {

						conn_tOracleInput_3.close();

					}

				}

				globalMap.put("tOracleInput_3_NB_LINE", nb_line_tOracleInput_3);

				ok_Hash.put("tOracleInput_3", true);
				end_Hash.put("tOracleInput_3", System.currentTimeMillis());

				/**
				 * [tOracleInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_3 finally ] start
				 */

				currentComponent = "tOracleInput_3";

				/**
				 * [tOracleInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ETLXML8HR ETLXML8HRClass = new ETLXML8HR();

		int exitCode = ETLXML8HRClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ETLXML8HR.class.getClassLoader().getResourceAsStream(contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context " + contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.FileName = (String) context.getProperty("FileName");
			context.FilePath = (String) context.getProperty("FilePath");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("FileName")) {
				context.FileName = (String) parentContextMap.get("FileName");
			}
			if (parentContextMap.containsKey("FilePath")) {
				context.FilePath = (String) parentContextMap.get("FilePath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_4) {
			globalMap.put("tOracleInput_4_SUBPROCESS_STATE", -1);

			e_tOracleInput_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETLXML8HR");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "", "" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 127205 characters generated by Talend Open Studio for Data Integration on the
 * July 7, 2017 7:41:30 AM EEST
 ************************************************************************************************/